
NIOS.elf:     file format elf32-littlenios2
NIOS.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x01010020

Program Header:
    LOAD off    0x00001000 vaddr 0x01010000 paddr 0x01010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01010020 paddr 0x01010020 align 2**12
         filesz 0x0000182c memsz 0x0000182c flags r-x
    LOAD off    0x0000284c vaddr 0x0101184c paddr 0x0101199c align 2**12
         filesz 0x00000150 memsz 0x00000150 flags rw-
    LOAD off    0x00000aec vaddr 0x01011aec paddr 0x01011aec align 2**12
         filesz 0x00000000 memsz 0x00001018 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01010000  01010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  01010020  01010020  0000299c  2**0
                  CONTENTS
  2 .text         000016f4  01010020  01010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000138  01011714  01011714  00002714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000150  0101184c  0101199c  0000284c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00001018  01011aec  01011aec  00002aec  2**2
                  ALLOC, SMALL_DATA
  6 .EPCQ_avl_mem 00000000  00000000  00000000  0000299c  2**0
                  CONTENTS
  7 .RAM          00000000  01012b04  01012b04  0000299c  2**0
                  CONTENTS
  8 .comment      0000002d  00000000  00000000  0000299c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000420  00000000  00000000  000029d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   0000734e  00000000  00000000  00002df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000255c  00000000  00000000  0000a13e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   0000212f  00000000  00000000  0000c69a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  0000074c  00000000  00000000  0000e7cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00001061  00000000  00000000  0000ef18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000040  00000000  00000000  0000ff7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000020  00000000  00000000  0000ffc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000028f  00000000  00000000  0000ffe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000d18  00000000  00000000  0001026f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 00001cdc  00000000  00000000  00010f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .thread_model 00000003  00000000  00000000  000142b2  2**0
                  CONTENTS, READONLY
 21 .cpu          00000004  00000000  00000000  000142b5  2**0
                  CONTENTS, READONLY
 22 .qsys         00000001  00000000  00000000  000142b9  2**0
                  CONTENTS, READONLY
 23 .simulation_enabled 00000001  00000000  00000000  000142ba  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000005  00000000  00000000  000142bb  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000005  00000000  00000000  000142c0  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000005  00000000  00000000  000142c5  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000004  00000000  00000000  000142ca  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000041  00000000  00000000  000142ce  2**0
                  CONTENTS, READONLY
 29 .jdi          000042e5  00000000  00000000  0001430f  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003d3f2  00000000  00000000  000185f4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01010000 l    d  .entry	00000000 .entry
01010020 l    d  .exceptions	00000000 .exceptions
01010020 l    d  .text	00000000 .text
01011714 l    d  .rodata	00000000 .rodata
0101184c l    d  .rwdata	00000000 .rwdata
01011aec l    d  .bss	00000000 .bss
00000000 l    d  .EPCQ_avl_mem	00000000 .EPCQ_avl_mem
01012b04 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    df *ABS*	00000000 crt0.o
01010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 peripheral_linker.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 impure.c
00000000 l    df *ABS*	00000000 vfprintf.c
010104a8 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
010118a0 l     O .rwdata	000000dc EPCQ
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_epcq_controller2.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
010103e4 g     F .text	00000018 putchar
01010edc g     F .text	0000002c alt_main
010103fc g     F .text	00000080 _puts_r
0101199c g       *ABS*	00000000 __flash_rwdata_start
01011b04 g     O .bss	00001000 subsector_buffer
01010394 g     F .text	00000048 printf
0101126c g     F .text	0000012c alt_epcq_controller2_write
01010f08 g     F .text	00000038 alt_putstr
01011644 g     F .text	00000008 altera_nios2_gen2_irq_init
01010000 g     F .entry	0000000c __reset
01010020 g       *ABS*	00000000 __flash_exceptions_start
01011af4 g     O .bss	00000004 errno
01011afc g     O .bss	00000004 alt_argv
0101997c g       *ABS*	00000000 _gp
010103dc g     F .text	00000008 _putchar_r
0101164c g     F .text	00000070 alt_find_dev
010116ec g     F .text	00000028 memcpy
01010ff8 g     F .text	0000005c alt_epcq_controller2_lock
0101047c g     F .text	00000010 puts
01011120 g     F .text	0000014c alt_epcq_controller2_write_block
01010358 g     F .text	0000003c _printf_r
01010ce0 g     F .text	00000064 .hidden __udivsi3
01011980 g     O .rwdata	00000004 length
01012b04 g       *ABS*	00000000 __bss_end
01011054 g     F .text	00000038 alt_epcq_controller2_get_info
01011574 g     F .text	00000004 alt_dcache_flush_all
0101199c g       *ABS*	00000000 __ram_rwdata_end
0101197c g     O .rwdata	00000001 on_off
01010f40 g     F .text	0000005c write
01010b44 g     F .text	00000058 _putc_r
0101184c g       *ABS*	00000000 __ram_rodata_end
0101198c g     O .rwdata	00000004 DEBUG
01010d44 g     F .text	0000005c .hidden __umodsi3
01012b04 g       *ABS*	00000000 end
0101a000 g       *ABS*	00000000 __alt_stack_pointer
01011988 g     O .rwdata	00000004 epcq_dev_ptr
01010fc8 g     F .text	00000030 altera_avalon_jtag_uart_write
01010514 g     F .text	0000051c ___vfprintf_internal_r
01010020 g     F .text	0000003c _start
01010fbc g     F .text	0000000c alt_sys_init
01010da0 g     F .text	00000028 .hidden __mulsi3
0101184c g       *ABS*	00000000 __ram_rwdata_start
01011714 g       *ABS*	00000000 __ram_rodata_start
010102c4 g     F .text	00000028 erase_epcq_sector
00000000 g       *ABS*	00000000 __alt_mem_EPCQ_avl_mem
01011af0 g     O .bss	00000004 mem_read_offset
010113e8 g     F .text	0000018c altera_epcq_controller2_init
01010dc8 g     F .text	00000090 alt_busy_sleep
010116bc g     F .text	00000030 memcmp
01012b04 g       *ABS*	00000000 __alt_stack_base
01010250 g     F .text	00000074 print_read_epcq_mem
01011578 g     F .text	00000068 alt_dev_llist_insert
01011994 g     O .rwdata	00000008 alt_flash_dev_list
01010a48 g     F .text	000000a8 __sfvwrite_small_dev
01011aec g       *ABS*	00000000 __bss_start
0101005c g     F .text	000001f4 main
01010000 g       *ABS*	00000000 __alt_mem_RAM
01011af8 g     O .bss	00000004 alt_envp
01011990 g     O .rwdata	00000004 alt_errno
01010af0 g     F .text	00000054 putc
01010bec g     F .text	00000080 .hidden __divsi3
01011714 g       *ABS*	00000000 __flash_rodata_start
01010f9c g     F .text	00000020 alt_irq_init
01011398 g     F .text	00000050 alt_epcq_controller2_read
01010b9c g     F .text	00000050 _write_r
01011984 g     O .rwdata	00000004 _impure_ptr
01011b00 g     O .bss	00000004 alt_argc
01010020 g       *ABS*	00000000 __ram_exceptions_start
01011aec g     O .bss	00000004 erase_offset
0101199c g       *ABS*	00000000 _edata
010102ec g     F .text	0000006c erase_epcq_all_sector
01012b04 g       *ABS*	00000000 _end
010115e0 g     F .text	0000004c alt_flash_open_dev
01010020 g       *ABS*	00000000 __ram_exceptions_end
0101162c g     F .text	00000014 alt_flash_close_dev
01010c6c g     F .text	00000074 .hidden __modsi3
0101184c g     O .rwdata	00000054 _impure_data
0101a000 g       *ABS*	00000000 __alt_data_end
0101000c g       .entry	00000000 _exit
0101048c g     F .text	0000001c strlen
0101108c g     F .text	00000094 alt_epcq_controller2_erase_block
01011640 g     F .text	00000004 alt_icache_flush_all
01010a30 g     F .text	00000018 __vfprintf_internal
01010e58 g     F .text	00000084 alt_load



Disassembly of section .entry:

01010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1010000:	00404074 	movhi	at,257
    ori r1, r1, %lo(_start)
 1010004:	08400814 	ori	at,at,32
    jmp r1
 1010008:	0800683a 	jmp	at

0101000c <_exit>:
	...

Disassembly of section .text:

01010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 1010020:	06c04074 	movhi	sp,257
    ori sp, sp, %lo(__alt_stack_pointer)
 1010024:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
 1010028:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 101002c:	d6a65f14 	ori	gp,gp,39292
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 1010030:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 1010034:	1086bb14 	ori	r2,r2,6892

    movhi r3, %hi(__bss_end)
 1010038:	00c04074 	movhi	r3,257
    ori r3, r3, %lo(__bss_end)
 101003c:	18cac114 	ori	r3,r3,11012

    beq r2, r3, 1f
 1010040:	10c00326 	beq	r2,r3,1010050 <_start+0x30>

0:
    stw zero, (r2)
 1010044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1010048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 101004c:	10fffd36 	bltu	r2,r3,1010044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1010050:	1010e580 	call	1010e58 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1010054:	1010edc0 	call	1010edc <alt_main>

01010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1010058:	003fff06 	br	1010058 <alt_after_alt_main>

0101005c <main>:

uint8_t on_off = 1;		// For Toggling the LED

int main()
{ 
  alt_putstr("------- Welcome to EPCQ Read/ Write Programme! -------\n");
 101005c:	01004074 	movhi	r4,257
{ 
 1010060:	defffb04 	addi	sp,sp,-20
  alt_putstr("------- Welcome to EPCQ Read/ Write Programme! -------\n");
 1010064:	2105c504 	addi	r4,r4,5908
{ 
 1010068:	dfc00415 	stw	ra,16(sp)
 101006c:	dc000315 	stw	r16,12(sp)
  alt_putstr("------- Welcome to EPCQ Read/ Write Programme! -------\n");
 1010070:	1010f080 	call	1010f08 <alt_putstr>
  alt_putstr("Please refer to the memory range for your EPCQ Device\n");
 1010074:	01004074 	movhi	r4,257
 1010078:	2105d304 	addi	r4,r4,5964
 101007c:	1010f080 	call	1010f08 <alt_putstr>

  // Reads First Sub-sector And Prints In Console
  if(alt_epcq_controller2_read(&epcq_dev_ptr->dev, mem_read_offset, subsector_buffer, length) == 0) {
 1010080:	d1e00117 	ldw	r7,-32764(gp)
 1010084:	d1605d17 	ldw	r5,-32396(gp)
 1010088:	d1200317 	ldw	r4,-32756(gp)
 101008c:	01804074 	movhi	r6,257
 1010090:	3186c104 	addi	r6,r6,6916
 1010094:	10113980 	call	1011398 <alt_epcq_controller2_read>
 1010098:	1000531e 	bne	r2,zero,10101e8 <main+0x18c>
	  printf("Read successful!\n");
 101009c:	01004074 	movhi	r4,257
 10100a0:	2105e104 	addi	r4,r4,6020
 10100a4:	101047c0 	call	101047c <puts>
	  print_read_epcq_mem(subsector_buffer, mem_read_offset, length);
 10100a8:	d1a00117 	ldw	r6,-32764(gp)
 10100ac:	d1605d17 	ldw	r5,-32396(gp)
 10100b0:	01004074 	movhi	r4,257
 10100b4:	2106c104 	addi	r4,r4,6916
 10100b8:	10102500 	call	1010250 <print_read_epcq_mem>
  } else {
	  printf("Read failed!\n");
  }

  // Checks if "dennis" is detected, if so erase memory, else write "dennis"
  if (IORD_8DIRECT(EPCQ_AVL_MEM_BASE, 0x000000) == 0x64 \
 10100bc:	00800023 	ldbuio	r2,0(zero)
 10100c0:	10803fcc 	andi	r2,r2,255
 10100c4:	10801918 	cmpnei	r2,r2,100
 10100c8:	10004e1e 	bne	r2,zero,1010204 <main+0x1a8>
		  && IORD_8DIRECT(EPCQ_AVL_MEM_BASE, 0x000001) == 0x65 \
 10100cc:	00800063 	ldbuio	r2,1(zero)
 10100d0:	10803fcc 	andi	r2,r2,255
 10100d4:	10801958 	cmpnei	r2,r2,101
 10100d8:	10004a1e 	bne	r2,zero,1010204 <main+0x1a8>
		  && IORD_8DIRECT(EPCQ_AVL_MEM_BASE, 0x000002) == 0x6E \
 10100dc:	008000a3 	ldbuio	r2,2(zero)
 10100e0:	10803fcc 	andi	r2,r2,255
 10100e4:	10801b98 	cmpnei	r2,r2,110
 10100e8:	1000461e 	bne	r2,zero,1010204 <main+0x1a8>
		  && IORD_8DIRECT(EPCQ_AVL_MEM_BASE, 0x000003) == 0x6E \
 10100ec:	008000e3 	ldbuio	r2,3(zero)
 10100f0:	10803fcc 	andi	r2,r2,255
 10100f4:	10801b98 	cmpnei	r2,r2,110
 10100f8:	1000421e 	bne	r2,zero,1010204 <main+0x1a8>
		  && IORD_8DIRECT(EPCQ_AVL_MEM_BASE, 0x000004) == 0x69 \
 10100fc:	00800123 	ldbuio	r2,4(zero)
 1010100:	10803fcc 	andi	r2,r2,255
 1010104:	10801a58 	cmpnei	r2,r2,105
 1010108:	10003e1e 	bne	r2,zero,1010204 <main+0x1a8>
		  && IORD_8DIRECT(EPCQ_AVL_MEM_BASE, 0x000005) == 0x73 ){
 101010c:	00800163 	ldbuio	r2,5(zero)
 1010110:	10803fcc 	andi	r2,r2,255
 1010114:	10801cd8 	cmpnei	r2,r2,115
 1010118:	10003a1e 	bne	r2,zero,1010204 <main+0x1a8>

	  if(erase_epcq_sector(0x000000) == 0) {
 101011c:	0009883a 	mov	r4,zero
 1010120:	10102c40 	call	10102c4 <erase_epcq_sector>
 1010124:	10803fcc 	andi	r2,r2,255
 1010128:	1000331e 	bne	r2,zero,10101f8 <main+0x19c>
		  printf("Erase successful!\n");
 101012c:	01004074 	movhi	r4,257
 1010130:	2105ea04 	addi	r4,r4,6056
	  } else {
		  printf("Erase failed!\n");
 1010134:	101047c0 	call	101047c <puts>
		IOWR_8DIRECT(EPCQ_AVL_MEM_BASE, 0x000000 + 4, 0x69); // i
		IOWR_8DIRECT(EPCQ_AVL_MEM_BASE, 0x000000 + 5, 0x73); // s
  }

  // Reads First Sub-sector And Prints In Console
  if(alt_epcq_controller2_read(&epcq_dev_ptr->dev, mem_read_offset, subsector_buffer, length) == 0) {
 1010138:	d1e00117 	ldw	r7,-32764(gp)
 101013c:	d1605d17 	ldw	r5,-32396(gp)
 1010140:	d1200317 	ldw	r4,-32756(gp)
 1010144:	01804074 	movhi	r6,257
 1010148:	3186c104 	addi	r6,r6,6916
 101014c:	10113980 	call	1011398 <alt_epcq_controller2_read>
 1010150:	1000381e 	bne	r2,zero,1010234 <main+0x1d8>
	  printf("Read successful!\n");
 1010154:	01004074 	movhi	r4,257
 1010158:	2105e104 	addi	r4,r4,6020
 101015c:	101047c0 	call	101047c <puts>
	  print_read_epcq_mem(subsector_buffer, mem_read_offset, length);
 1010160:	d1a00117 	ldw	r6,-32764(gp)
 1010164:	d1605d17 	ldw	r5,-32396(gp)
 1010168:	01004074 	movhi	r4,257
 101016c:	2106c104 	addi	r4,r4,6916
 1010170:	10102500 	call	1010250 <print_read_epcq_mem>
  } else {
	  printf("Read failed!\n");
  }

  // Performs a Complete Erase of the EPCQ Memory
  IOWR_8DIRECT(EPCQ_AVL_MEM_BASE, 0x120000, 0x73); // s
 1010174:	00c01cc4 	movi	r3,115
 1010178:	008004b4 	movhi	r2,18
 101017c:	10c00025 	stbio	r3,0(r2)
  uint8_t buffer[10];
  alt_epcq_controller2_read(&epcq_dev_ptr->dev, 0x120000, buffer, sizeof(buffer));
 1010180:	d1200317 	ldw	r4,-32756(gp)
 1010184:	01c00284 	movi	r7,10
 1010188:	d9800084 	addi	r6,sp,2
 101018c:	014004b4 	movhi	r5,18
 1010190:	10113980 	call	1011398 <alt_epcq_controller2_read>
  printf("0x%02X", buffer[0]);
 1010194:	d9400083 	ldbu	r5,2(sp)
 1010198:	01004074 	movhi	r4,257
 101019c:	2105f304 	addi	r4,r4,6092
 10101a0:	10103940 	call	1010394 <printf>

  if(erase_epcq_all_sector() == 0 )
 10101a4:	10102ec0 	call	10102ec <erase_epcq_all_sector>
 10101a8:	10803fcc 	andi	r2,r2,255
 10101ac:	1000251e 	bne	r2,zero,1010244 <main+0x1e8>
	  printf("Erased all EPCQ Sectors\n");
 10101b0:	01004074 	movhi	r4,257
 10101b4:	2105f504 	addi	r4,r4,6100

  /* Event loop never exits. */
  while (1){
		IOWR(LED_BASE, 0, on_off);
		on_off = ~on_off;
		alt_busy_sleep(1000000);
 10101b8:	040003f4 	movhi	r16,15
	  printf("Erased all EPCQ Sectors\n");
 10101bc:	101047c0 	call	101047c <puts>
		alt_busy_sleep(1000000);
 10101c0:	84109004 	addi	r16,r16,16960
		IOWR(LED_BASE, 0, on_off);
 10101c4:	d0e00003 	ldbu	r3,-32768(gp)
 10101c8:	008040b4 	movhi	r2,258
 10101cc:	10c41035 	stwio	r3,4160(r2)
		on_off = ~on_off;
 10101d0:	d0a00003 	ldbu	r2,-32768(gp)
		alt_busy_sleep(1000000);
 10101d4:	8009883a 	mov	r4,r16
		on_off = ~on_off;
 10101d8:	0084303a 	nor	r2,zero,r2
 10101dc:	d0a00005 	stb	r2,-32768(gp)
		alt_busy_sleep(1000000);
 10101e0:	1010dc80 	call	1010dc8 <alt_busy_sleep>
  while (1){
 10101e4:	003ff706 	br	10101c4 <main+0x168>
	  printf("Read failed!\n");
 10101e8:	01004074 	movhi	r4,257
 10101ec:	2105e604 	addi	r4,r4,6040
 10101f0:	101047c0 	call	101047c <puts>
 10101f4:	003fb106 	br	10100bc <main+0x60>
		  printf("Erase failed!\n");
 10101f8:	01004074 	movhi	r4,257
 10101fc:	2105ef04 	addi	r4,r4,6076
 1010200:	003fcc06 	br	1010134 <main+0xd8>
		IOWR_8DIRECT(EPCQ_AVL_MEM_BASE, 0x000000 + 0, 0x64); // d
 1010204:	00801904 	movi	r2,100
 1010208:	00800025 	stbio	r2,0(zero)
		IOWR_8DIRECT(EPCQ_AVL_MEM_BASE, 0x000000 + 1, 0x65); // e
 101020c:	00801944 	movi	r2,101
 1010210:	00800065 	stbio	r2,1(zero)
		IOWR_8DIRECT(EPCQ_AVL_MEM_BASE, 0x000000 + 2, 0x6E); // n
 1010214:	00801b84 	movi	r2,110
 1010218:	008000a5 	stbio	r2,2(zero)
		IOWR_8DIRECT(EPCQ_AVL_MEM_BASE, 0x000000 + 3, 0x6E); // n
 101021c:	008000e5 	stbio	r2,3(zero)
		IOWR_8DIRECT(EPCQ_AVL_MEM_BASE, 0x000000 + 4, 0x69); // i
 1010220:	00801a44 	movi	r2,105
 1010224:	00800125 	stbio	r2,4(zero)
		IOWR_8DIRECT(EPCQ_AVL_MEM_BASE, 0x000000 + 5, 0x73); // s
 1010228:	00801cc4 	movi	r2,115
 101022c:	00800165 	stbio	r2,5(zero)
 1010230:	003fc106 	br	1010138 <main+0xdc>
	  printf("Read failed!\n");
 1010234:	01004074 	movhi	r4,257
 1010238:	2105e604 	addi	r4,r4,6040
 101023c:	101047c0 	call	101047c <puts>
 1010240:	003fcc06 	br	1010174 <main+0x118>
	  printf("Erase all EPCQ Sectors Failed\n");
 1010244:	01004074 	movhi	r4,257
 1010248:	2105fb04 	addi	r4,r4,6124
 101024c:	003fda06 	br	10101b8 <main+0x15c>

01010250 <print_read_epcq_mem>:
 *
 * @return N/A
 *
 */

void print_read_epcq_mem(uint8_t *subsector_buffer_array, int mem_read_offset, int sizeof_subesector_buffer){
 1010250:	defffb04 	addi	sp,sp,-20
 1010254:	dcc00315 	stw	r19,12(sp)
	for (int i = 0; i < sizeof_subesector_buffer - mem_read_offset; i++) {
		printf("%02X ", subsector_buffer_array[i]);
 1010258:	04c04074 	movhi	r19,257
void print_read_epcq_mem(uint8_t *subsector_buffer_array, int mem_read_offset, int sizeof_subesector_buffer){
 101025c:	dc800215 	stw	r18,8(sp)
 1010260:	dc400115 	stw	r17,4(sp)
 1010264:	dc000015 	stw	r16,0(sp)
 1010268:	dfc00415 	stw	ra,16(sp)
 101026c:	2025883a 	mov	r18,r4
	for (int i = 0; i < sizeof_subesector_buffer - mem_read_offset; i++) {
 1010270:	0021883a 	mov	r16,zero
 1010274:	3163c83a 	sub	r17,r6,r5
		printf("%02X ", subsector_buffer_array[i]);
 1010278:	9cc60304 	addi	r19,r19,6156
	for (int i = 0; i < sizeof_subesector_buffer - mem_read_offset; i++) {
 101027c:	84400716 	blt	r16,r17,101029c <print_read_epcq_mem+0x4c>
		if ((i + 1) % 16 == 0) printf("\n");
	}

}
 1010280:	dfc00417 	ldw	ra,16(sp)
 1010284:	dcc00317 	ldw	r19,12(sp)
 1010288:	dc800217 	ldw	r18,8(sp)
 101028c:	dc400117 	ldw	r17,4(sp)
 1010290:	dc000017 	ldw	r16,0(sp)
 1010294:	dec00504 	addi	sp,sp,20
 1010298:	f800283a 	ret
		printf("%02X ", subsector_buffer_array[i]);
 101029c:	9405883a 	add	r2,r18,r16
 10102a0:	11400003 	ldbu	r5,0(r2)
 10102a4:	9809883a 	mov	r4,r19
		if ((i + 1) % 16 == 0) printf("\n");
 10102a8:	84000044 	addi	r16,r16,1
		printf("%02X ", subsector_buffer_array[i]);
 10102ac:	10103940 	call	1010394 <printf>
		if ((i + 1) % 16 == 0) printf("\n");
 10102b0:	808003cc 	andi	r2,r16,15
 10102b4:	103ff11e 	bne	r2,zero,101027c <print_read_epcq_mem+0x2c>
 10102b8:	01000284 	movi	r4,10
 10102bc:	10103e40 	call	10103e4 <putchar>
 10102c0:	003fee06 	br	101027c <print_read_epcq_mem+0x2c>

010102c4 <erase_epcq_sector>:
 *
 */

uint8_t erase_epcq_sector(int erase_offset){

	if (alt_epcq_controller2_erase_block(&epcq_dev_ptr->dev, erase_offset) == 0){
 10102c4:	200b883a 	mov	r5,r4
 10102c8:	d1200317 	ldw	r4,-32756(gp)
uint8_t erase_epcq_sector(int erase_offset){
 10102cc:	deffff04 	addi	sp,sp,-4
 10102d0:	dfc00015 	stw	ra,0(sp)
	if (alt_epcq_controller2_erase_block(&epcq_dev_ptr->dev, erase_offset) == 0){
 10102d4:	101108c0 	call	101108c <alt_epcq_controller2_erase_block>
 10102d8:	10000126 	beq	r2,zero,10102e0 <erase_epcq_sector+0x1c>
		return 0;
	}
	else
		return 9;
 10102dc:	00800244 	movi	r2,9
}
 10102e0:	dfc00017 	ldw	ra,0(sp)
 10102e4:	dec00104 	addi	sp,sp,4
 10102e8:	f800283a 	ret

010102ec <erase_epcq_all_sector>:
 *
 * @return 0: Erase Success, 9: Erase Failed.
 *
 */

uint8_t erase_epcq_all_sector(void ){
 10102ec:	defffc04 	addi	sp,sp,-16
 10102f0:	dc800215 	stw	r18,8(sp)
 10102f4:	dc400115 	stw	r17,4(sp)
 10102f8:	dc000015 	stw	r16,0(sp)
 10102fc:	dfc00315 	stw	ra,12(sp)

	uint8_t response = 0;
	for (uint32_t addr = 0x000000; addr <= 0xEF0000; addr += 0x10000) {
 1010300:	0021883a 	mov	r16,zero
 1010304:	04800074 	movhi	r18,1
 1010308:	04403c34 	movhi	r17,240
	    response = alt_epcq_controller2_erase_block(&epcq_dev_ptr->dev, addr);
 101030c:	d1200317 	ldw	r4,-32756(gp)
 1010310:	800b883a 	mov	r5,r16
 1010314:	101108c0 	call	101108c <alt_epcq_controller2_erase_block>
	    if (response != 0) {
 1010318:	10803fcc 	andi	r2,r2,255
 101031c:	10000b26 	beq	r2,zero,101034c <erase_epcq_all_sector+0x60>
	        printf("Erase failed at address 0x%06X\n", addr);
 1010320:	01004074 	movhi	r4,257
 1010324:	800b883a 	mov	r5,r16
 1010328:	21060504 	addi	r4,r4,6164
 101032c:	10103940 	call	1010394 <printf>
	        break;
	    }
	}
	return 0;
}
 1010330:	0005883a 	mov	r2,zero
 1010334:	dfc00317 	ldw	ra,12(sp)
 1010338:	dc800217 	ldw	r18,8(sp)
 101033c:	dc400117 	ldw	r17,4(sp)
 1010340:	dc000017 	ldw	r16,0(sp)
 1010344:	dec00404 	addi	sp,sp,16
 1010348:	f800283a 	ret
	for (uint32_t addr = 0x000000; addr <= 0xEF0000; addr += 0x10000) {
 101034c:	84a1883a 	add	r16,r16,r18
 1010350:	847fee1e 	bne	r16,r17,101030c <erase_epcq_all_sector+0x20>
 1010354:	003ff606 	br	1010330 <erase_epcq_all_sector+0x44>

01010358 <_printf_r>:
 1010358:	defffd04 	addi	sp,sp,-12
 101035c:	dfc00015 	stw	ra,0(sp)
 1010360:	d9800115 	stw	r6,4(sp)
 1010364:	d9c00215 	stw	r7,8(sp)
 1010368:	21800217 	ldw	r6,8(r4)
 101036c:	00c04074 	movhi	r3,257
 1010370:	18c29204 	addi	r3,r3,2632
 1010374:	30c00115 	stw	r3,4(r6)
 1010378:	280d883a 	mov	r6,r5
 101037c:	21400217 	ldw	r5,8(r4)
 1010380:	d9c00104 	addi	r7,sp,4
 1010384:	10105140 	call	1010514 <___vfprintf_internal_r>
 1010388:	dfc00017 	ldw	ra,0(sp)
 101038c:	dec00304 	addi	sp,sp,12
 1010390:	f800283a 	ret

01010394 <printf>:
 1010394:	defffc04 	addi	sp,sp,-16
 1010398:	dfc00015 	stw	ra,0(sp)
 101039c:	d9400115 	stw	r5,4(sp)
 10103a0:	d9800215 	stw	r6,8(sp)
 10103a4:	d9c00315 	stw	r7,12(sp)
 10103a8:	00804074 	movhi	r2,257
 10103ac:	10c66117 	ldw	r3,6532(r2)
 10103b0:	00804074 	movhi	r2,257
 10103b4:	10829204 	addi	r2,r2,2632
 10103b8:	19400217 	ldw	r5,8(r3)
 10103bc:	d9800104 	addi	r6,sp,4
 10103c0:	28800115 	stw	r2,4(r5)
 10103c4:	200b883a 	mov	r5,r4
 10103c8:	19000217 	ldw	r4,8(r3)
 10103cc:	1010a300 	call	1010a30 <__vfprintf_internal>
 10103d0:	dfc00017 	ldw	ra,0(sp)
 10103d4:	dec00404 	addi	sp,sp,16
 10103d8:	f800283a 	ret

010103dc <_putchar_r>:
 10103dc:	21800217 	ldw	r6,8(r4)
 10103e0:	1010b441 	jmpi	1010b44 <_putc_r>

010103e4 <putchar>:
 10103e4:	00804074 	movhi	r2,257
 10103e8:	10866117 	ldw	r2,6532(r2)
 10103ec:	200b883a 	mov	r5,r4
 10103f0:	11800217 	ldw	r6,8(r2)
 10103f4:	1009883a 	mov	r4,r2
 10103f8:	1010b441 	jmpi	1010b44 <_putc_r>

010103fc <_puts_r>:
 10103fc:	defffd04 	addi	sp,sp,-12
 1010400:	dc000015 	stw	r16,0(sp)
 1010404:	2021883a 	mov	r16,r4
 1010408:	2809883a 	mov	r4,r5
 101040c:	dfc00215 	stw	ra,8(sp)
 1010410:	dc400115 	stw	r17,4(sp)
 1010414:	2823883a 	mov	r17,r5
 1010418:	101048c0 	call	101048c <strlen>
 101041c:	81400217 	ldw	r5,8(r16)
 1010420:	00c04074 	movhi	r3,257
 1010424:	18c29204 	addi	r3,r3,2632
 1010428:	28c00115 	stw	r3,4(r5)
 101042c:	100f883a 	mov	r7,r2
 1010430:	880d883a 	mov	r6,r17
 1010434:	8009883a 	mov	r4,r16
 1010438:	1010a480 	call	1010a48 <__sfvwrite_small_dev>
 101043c:	10ffffe0 	cmpeqi	r3,r2,-1
 1010440:	1800091e 	bne	r3,zero,1010468 <_puts_r+0x6c>
 1010444:	81400217 	ldw	r5,8(r16)
 1010448:	01804074 	movhi	r6,257
 101044c:	01c00044 	movi	r7,1
 1010450:	28800117 	ldw	r2,4(r5)
 1010454:	31860d04 	addi	r6,r6,6196
 1010458:	8009883a 	mov	r4,r16
 101045c:	103ee83a 	callr	r2
 1010460:	10bfffe0 	cmpeqi	r2,r2,-1
 1010464:	0085c83a 	sub	r2,zero,r2
 1010468:	dfc00217 	ldw	ra,8(sp)
 101046c:	dc400117 	ldw	r17,4(sp)
 1010470:	dc000017 	ldw	r16,0(sp)
 1010474:	dec00304 	addi	sp,sp,12
 1010478:	f800283a 	ret

0101047c <puts>:
 101047c:	00804074 	movhi	r2,257
 1010480:	200b883a 	mov	r5,r4
 1010484:	11066117 	ldw	r4,6532(r2)
 1010488:	10103fc1 	jmpi	10103fc <_puts_r>

0101048c <strlen>:
 101048c:	2005883a 	mov	r2,r4
 1010490:	10c00007 	ldb	r3,0(r2)
 1010494:	1800021e 	bne	r3,zero,10104a0 <strlen+0x14>
 1010498:	1105c83a 	sub	r2,r2,r4
 101049c:	f800283a 	ret
 10104a0:	10800044 	addi	r2,r2,1
 10104a4:	003ffa06 	br	1010490 <strlen+0x4>

010104a8 <print_repeat>:
 10104a8:	defffb04 	addi	sp,sp,-20
 10104ac:	dc800315 	stw	r18,12(sp)
 10104b0:	dc400215 	stw	r17,8(sp)
 10104b4:	dc000115 	stw	r16,4(sp)
 10104b8:	dfc00415 	stw	ra,16(sp)
 10104bc:	2025883a 	mov	r18,r4
 10104c0:	2823883a 	mov	r17,r5
 10104c4:	d9800005 	stb	r6,0(sp)
 10104c8:	3821883a 	mov	r16,r7
 10104cc:	04000716 	blt	zero,r16,10104ec <print_repeat+0x44>
 10104d0:	0005883a 	mov	r2,zero
 10104d4:	dfc00417 	ldw	ra,16(sp)
 10104d8:	dc800317 	ldw	r18,12(sp)
 10104dc:	dc400217 	ldw	r17,8(sp)
 10104e0:	dc000117 	ldw	r16,4(sp)
 10104e4:	dec00504 	addi	sp,sp,20
 10104e8:	f800283a 	ret
 10104ec:	88800117 	ldw	r2,4(r17)
 10104f0:	01c00044 	movi	r7,1
 10104f4:	d80d883a 	mov	r6,sp
 10104f8:	880b883a 	mov	r5,r17
 10104fc:	9009883a 	mov	r4,r18
 1010500:	103ee83a 	callr	r2
 1010504:	843fffc4 	addi	r16,r16,-1
 1010508:	103ff026 	beq	r2,zero,10104cc <print_repeat+0x24>
 101050c:	00bfffc4 	movi	r2,-1
 1010510:	003ff006 	br	10104d4 <print_repeat+0x2c>

01010514 <___vfprintf_internal_r>:
 1010514:	deffe604 	addi	sp,sp,-104
 1010518:	ddc01715 	stw	r23,92(sp)
 101051c:	dd801615 	stw	r22,88(sp)
 1010520:	dd401515 	stw	r21,84(sp)
 1010524:	dd001415 	stw	r20,80(sp)
 1010528:	dcc01315 	stw	r19,76(sp)
 101052c:	dc801215 	stw	r18,72(sp)
 1010530:	dc401115 	stw	r17,68(sp)
 1010534:	dc001015 	stw	r16,64(sp)
 1010538:	dfc01915 	stw	ra,100(sp)
 101053c:	df001815 	stw	fp,96(sp)
 1010540:	2025883a 	mov	r18,r4
 1010544:	2823883a 	mov	r17,r5
 1010548:	d9800515 	stw	r6,20(sp)
 101054c:	382f883a 	mov	r23,r7
 1010550:	0021883a 	mov	r16,zero
 1010554:	d8000215 	stw	zero,8(sp)
 1010558:	d8000015 	stw	zero,0(sp)
 101055c:	0029883a 	mov	r20,zero
 1010560:	002d883a 	mov	r22,zero
 1010564:	0027883a 	mov	r19,zero
 1010568:	002b883a 	mov	r21,zero
 101056c:	d8000115 	stw	zero,4(sp)
 1010570:	0005883a 	mov	r2,zero
 1010574:	00000206 	br	1010580 <___vfprintf_internal_r+0x6c>
 1010578:	114000e0 	cmpeqi	r5,r2,3
 101057c:	28004e1e 	bne	r5,zero,10106b8 <___vfprintf_internal_r+0x1a4>
 1010580:	d8c00517 	ldw	r3,20(sp)
 1010584:	19000003 	ldbu	r4,0(r3)
 1010588:	18c00044 	addi	r3,r3,1
 101058c:	d8c00515 	stw	r3,20(sp)
 1010590:	20c03fcc 	andi	r3,r4,255
 1010594:	18c0201c 	xori	r3,r3,128
 1010598:	18ffe004 	addi	r3,r3,-128
 101059c:	18001026 	beq	r3,zero,10105e0 <___vfprintf_internal_r+0xcc>
 10105a0:	114000a0 	cmpeqi	r5,r2,2
 10105a4:	28001f1e 	bne	r5,zero,1010624 <___vfprintf_internal_r+0x110>
 10105a8:	114000c8 	cmpgei	r5,r2,3
 10105ac:	283ff21e 	bne	r5,zero,1010578 <___vfprintf_internal_r+0x64>
 10105b0:	1000181e 	bne	r2,zero,1010614 <___vfprintf_internal_r+0x100>
 10105b4:	18c00960 	cmpeqi	r3,r3,37
 10105b8:	18010e1e 	bne	r3,zero,10109f4 <___vfprintf_internal_r+0x4e0>
 10105bc:	88800117 	ldw	r2,4(r17)
 10105c0:	d9000805 	stb	r4,32(sp)
 10105c4:	01c00044 	movi	r7,1
 10105c8:	d9800804 	addi	r6,sp,32
 10105cc:	880b883a 	mov	r5,r17
 10105d0:	9009883a 	mov	r4,r18
 10105d4:	103ee83a 	callr	r2
 10105d8:	10001e26 	beq	r2,zero,1010654 <___vfprintf_internal_r+0x140>
 10105dc:	043fffc4 	movi	r16,-1
 10105e0:	8005883a 	mov	r2,r16
 10105e4:	dfc01917 	ldw	ra,100(sp)
 10105e8:	df001817 	ldw	fp,96(sp)
 10105ec:	ddc01717 	ldw	r23,92(sp)
 10105f0:	dd801617 	ldw	r22,88(sp)
 10105f4:	dd401517 	ldw	r21,84(sp)
 10105f8:	dd001417 	ldw	r20,80(sp)
 10105fc:	dcc01317 	ldw	r19,76(sp)
 1010600:	dc801217 	ldw	r18,72(sp)
 1010604:	dc401117 	ldw	r17,68(sp)
 1010608:	dc001017 	ldw	r16,64(sp)
 101060c:	dec01a04 	addi	sp,sp,104
 1010610:	f800283a 	ret
 1010614:	18800c20 	cmpeqi	r2,r3,48
 1010618:	1000ff1e 	bne	r2,zero,1010a18 <___vfprintf_internal_r+0x504>
 101061c:	18800958 	cmpnei	r2,r3,37
 1010620:	103fe626 	beq	r2,zero,10105bc <___vfprintf_internal_r+0xa8>
 1010624:	213ff404 	addi	r4,r4,-48
 1010628:	21003fcc 	andi	r4,r4,255
 101062c:	208002a8 	cmpgeui	r2,r4,10
 1010630:	10000c1e 	bne	r2,zero,1010664 <___vfprintf_internal_r+0x150>
 1010634:	98bfffe0 	cmpeqi	r2,r19,-1
 1010638:	1000081e 	bne	r2,zero,101065c <___vfprintf_internal_r+0x148>
 101063c:	980490ba 	slli	r2,r19,2
 1010640:	14c5883a 	add	r2,r2,r19
 1010644:	1004907a 	slli	r2,r2,1
 1010648:	20a7883a 	add	r19,r4,r2
 101064c:	00800084 	movi	r2,2
 1010650:	003fcb06 	br	1010580 <___vfprintf_internal_r+0x6c>
 1010654:	84000044 	addi	r16,r16,1
 1010658:	003fc906 	br	1010580 <___vfprintf_internal_r+0x6c>
 101065c:	0005883a 	mov	r2,zero
 1010660:	003ff906 	br	1010648 <___vfprintf_internal_r+0x134>
 1010664:	18800ba0 	cmpeqi	r2,r3,46
 1010668:	1000ef1e 	bne	r2,zero,1010a28 <___vfprintf_internal_r+0x514>
 101066c:	18801b20 	cmpeqi	r2,r3,108
 1010670:	1000ec1e 	bne	r2,zero,1010a24 <___vfprintf_internal_r+0x510>
 1010674:	b0bfffe0 	cmpeqi	r2,r22,-1
 1010678:	10001c1e 	bne	r2,zero,10106ec <___vfprintf_internal_r+0x1d8>
 101067c:	d8000115 	stw	zero,4(sp)
 1010680:	18801be0 	cmpeqi	r2,r3,111
 1010684:	1000ba1e 	bne	r2,zero,1010970 <___vfprintf_internal_r+0x45c>
 1010688:	18801c08 	cmpgei	r2,r3,112
 101068c:	1000581e 	bne	r2,zero,10107f0 <___vfprintf_internal_r+0x2dc>
 1010690:	188018e0 	cmpeqi	r2,r3,99
 1010694:	1000bd1e 	bne	r2,zero,101098c <___vfprintf_internal_r+0x478>
 1010698:	18801908 	cmpgei	r2,r3,100
 101069c:	1000151e 	bne	r2,zero,10106f4 <___vfprintf_internal_r+0x1e0>
 10106a0:	18c01620 	cmpeqi	r3,r3,88
 10106a4:	183fb226 	beq	r3,zero,1010570 <___vfprintf_internal_r+0x5c>
 10106a8:	a800721e 	bne	r21,zero,1010874 <___vfprintf_internal_r+0x360>
 10106ac:	00800044 	movi	r2,1
 10106b0:	d8800215 	stw	r2,8(sp)
 10106b4:	00007006 	br	1010878 <___vfprintf_internal_r+0x364>
 10106b8:	213ff404 	addi	r4,r4,-48
 10106bc:	21003fcc 	andi	r4,r4,255
 10106c0:	214002a8 	cmpgeui	r5,r4,10
 10106c4:	283fe91e 	bne	r5,zero,101066c <___vfprintf_internal_r+0x158>
 10106c8:	b0ffffe0 	cmpeqi	r3,r22,-1
 10106cc:	1800051e 	bne	r3,zero,10106e4 <___vfprintf_internal_r+0x1d0>
 10106d0:	b00690ba 	slli	r3,r22,2
 10106d4:	1d87883a 	add	r3,r3,r22
 10106d8:	1806907a 	slli	r3,r3,1
 10106dc:	20ed883a 	add	r22,r4,r3
 10106e0:	003fa706 	br	1010580 <___vfprintf_internal_r+0x6c>
 10106e4:	0007883a 	mov	r3,zero
 10106e8:	003ffc06 	br	10106dc <___vfprintf_internal_r+0x1c8>
 10106ec:	05800044 	movi	r22,1
 10106f0:	003fe306 	br	1010680 <___vfprintf_internal_r+0x16c>
 10106f4:	18801920 	cmpeqi	r2,r3,100
 10106f8:	1000021e 	bne	r2,zero,1010704 <___vfprintf_internal_r+0x1f0>
 10106fc:	18c01a60 	cmpeqi	r3,r3,105
 1010700:	183f9b26 	beq	r3,zero,1010570 <___vfprintf_internal_r+0x5c>
 1010704:	b8800104 	addi	r2,r23,4
 1010708:	d8800415 	stw	r2,16(sp)
 101070c:	d8800017 	ldw	r2,0(sp)
 1010710:	10009826 	beq	r2,zero,1010974 <___vfprintf_internal_r+0x460>
 1010714:	bdc00017 	ldw	r23,0(r23)
 1010718:	b8009a0e 	bge	r23,zero,1010984 <___vfprintf_internal_r+0x470>
 101071c:	05efc83a 	sub	r23,zero,r23
 1010720:	02400044 	movi	r9,1
 1010724:	df000804 	addi	fp,sp,32
 1010728:	e00d883a 	mov	r6,fp
 101072c:	b800541e 	bne	r23,zero,1010880 <___vfprintf_internal_r+0x36c>
 1010730:	e185c83a 	sub	r2,fp,r6
 1010734:	d8800315 	stw	r2,12(sp)
 1010738:	b085c83a 	sub	r2,r22,r2
 101073c:	00800b0e 	bge	zero,r2,101076c <___vfprintf_internal_r+0x258>
 1010740:	d8c01004 	addi	r3,sp,64
 1010744:	e0c0072e 	bgeu	fp,r3,1010764 <___vfprintf_internal_r+0x250>
 1010748:	e085883a 	add	r2,fp,r2
 101074c:	01000c04 	movi	r4,48
 1010750:	e7000044 	addi	fp,fp,1
 1010754:	e13fffc5 	stb	r4,-1(fp)
 1010758:	17000226 	beq	r2,fp,1010764 <___vfprintf_internal_r+0x250>
 101075c:	d8c01004 	addi	r3,sp,64
 1010760:	e0fffb36 	bltu	fp,r3,1010750 <___vfprintf_internal_r+0x23c>
 1010764:	e185c83a 	sub	r2,fp,r6
 1010768:	d8800315 	stw	r2,12(sp)
 101076c:	d8800317 	ldw	r2,12(sp)
 1010770:	4891883a 	add	r8,r9,r2
 1010774:	d8800117 	ldw	r2,4(sp)
 1010778:	9a2fc83a 	sub	r23,r19,r8
 101077c:	10005926 	beq	r2,zero,10108e4 <___vfprintf_internal_r+0x3d0>
 1010780:	48000a26 	beq	r9,zero,10107ac <___vfprintf_internal_r+0x298>
 1010784:	00800b44 	movi	r2,45
 1010788:	d88007c5 	stb	r2,31(sp)
 101078c:	88800117 	ldw	r2,4(r17)
 1010790:	01c00044 	movi	r7,1
 1010794:	d98007c4 	addi	r6,sp,31
 1010798:	880b883a 	mov	r5,r17
 101079c:	9009883a 	mov	r4,r18
 10107a0:	103ee83a 	callr	r2
 10107a4:	103f8d1e 	bne	r2,zero,10105dc <___vfprintf_internal_r+0xc8>
 10107a8:	84000044 	addi	r16,r16,1
 10107ac:	05c0070e 	bge	zero,r23,10107cc <___vfprintf_internal_r+0x2b8>
 10107b0:	b80f883a 	mov	r7,r23
 10107b4:	01800c04 	movi	r6,48
 10107b8:	880b883a 	mov	r5,r17
 10107bc:	9009883a 	mov	r4,r18
 10107c0:	10104a80 	call	10104a8 <print_repeat>
 10107c4:	103f851e 	bne	r2,zero,10105dc <___vfprintf_internal_r+0xc8>
 10107c8:	85e1883a 	add	r16,r16,r23
 10107cc:	d8800317 	ldw	r2,12(sp)
 10107d0:	e011883a 	mov	r8,fp
 10107d4:	172fc83a 	sub	r23,r2,fp
 10107d8:	ba05883a 	add	r2,r23,r8
 10107dc:	00805716 	blt	zero,r2,101093c <___vfprintf_internal_r+0x428>
 10107e0:	8707883a 	add	r3,r16,fp
 10107e4:	ddc00417 	ldw	r23,16(sp)
 10107e8:	1a21c83a 	sub	r16,r3,r8
 10107ec:	003f6006 	br	1010570 <___vfprintf_internal_r+0x5c>
 10107f0:	18801d60 	cmpeqi	r2,r3,117
 10107f4:	10005f1e 	bne	r2,zero,1010974 <___vfprintf_internal_r+0x460>
 10107f8:	18801e20 	cmpeqi	r2,r3,120
 10107fc:	10001e1e 	bne	r2,zero,1010878 <___vfprintf_internal_r+0x364>
 1010800:	18c01ce0 	cmpeqi	r3,r3,115
 1010804:	183f5a26 	beq	r3,zero,1010570 <___vfprintf_internal_r+0x5c>
 1010808:	b8800104 	addi	r2,r23,4
 101080c:	d8800315 	stw	r2,12(sp)
 1010810:	b8800017 	ldw	r2,0(r23)
 1010814:	1009883a 	mov	r4,r2
 1010818:	1039883a 	mov	fp,r2
 101081c:	101048c0 	call	101048c <strlen>
 1010820:	988fc83a 	sub	r7,r19,r2
 1010824:	102f883a 	mov	r23,r2
 1010828:	01c0080e 	bge	zero,r7,101084c <___vfprintf_internal_r+0x338>
 101082c:	01800804 	movi	r6,32
 1010830:	880b883a 	mov	r5,r17
 1010834:	9009883a 	mov	r4,r18
 1010838:	d9c00415 	stw	r7,16(sp)
 101083c:	10104a80 	call	10104a8 <print_repeat>
 1010840:	103f661e 	bne	r2,zero,10105dc <___vfprintf_internal_r+0xc8>
 1010844:	d9c00417 	ldw	r7,16(sp)
 1010848:	81e1883a 	add	r16,r16,r7
 101084c:	88800117 	ldw	r2,4(r17)
 1010850:	b80f883a 	mov	r7,r23
 1010854:	e00d883a 	mov	r6,fp
 1010858:	880b883a 	mov	r5,r17
 101085c:	9009883a 	mov	r4,r18
 1010860:	103ee83a 	callr	r2
 1010864:	103f5d1e 	bne	r2,zero,10105dc <___vfprintf_internal_r+0xc8>
 1010868:	85e1883a 	add	r16,r16,r23
 101086c:	ddc00317 	ldw	r23,12(sp)
 1010870:	003f4306 	br	1010580 <___vfprintf_internal_r+0x6c>
 1010874:	dd400215 	stw	r21,8(sp)
 1010878:	05000404 	movi	r20,16
 101087c:	00003d06 	br	1010974 <___vfprintf_internal_r+0x460>
 1010880:	b809883a 	mov	r4,r23
 1010884:	a00b883a 	mov	r5,r20
 1010888:	da400615 	stw	r9,24(sp)
 101088c:	1010ce00 	call	1010ce0 <__udivsi3>
 1010890:	1009883a 	mov	r4,r2
 1010894:	a00b883a 	mov	r5,r20
 1010898:	d8800315 	stw	r2,12(sp)
 101089c:	1010da00 	call	1010da0 <__mulsi3>
 10108a0:	b8afc83a 	sub	r23,r23,r2
 10108a4:	b8800288 	cmpgei	r2,r23,10
 10108a8:	d9000317 	ldw	r4,12(sp)
 10108ac:	da400617 	ldw	r9,24(sp)
 10108b0:	d9800804 	addi	r6,sp,32
 10108b4:	1000051e 	bne	r2,zero,10108cc <___vfprintf_internal_r+0x3b8>
 10108b8:	bdc00c04 	addi	r23,r23,48
 10108bc:	e7000044 	addi	fp,fp,1
 10108c0:	e5ffffc5 	stb	r23,-1(fp)
 10108c4:	202f883a 	mov	r23,r4
 10108c8:	003f9806 	br	101072c <___vfprintf_internal_r+0x218>
 10108cc:	d8800217 	ldw	r2,8(sp)
 10108d0:	10000226 	beq	r2,zero,10108dc <___vfprintf_internal_r+0x3c8>
 10108d4:	bdc00dc4 	addi	r23,r23,55
 10108d8:	003ff806 	br	10108bc <___vfprintf_internal_r+0x3a8>
 10108dc:	bdc015c4 	addi	r23,r23,87
 10108e0:	003ff606 	br	10108bc <___vfprintf_internal_r+0x3a8>
 10108e4:	05c0090e 	bge	zero,r23,101090c <___vfprintf_internal_r+0x3f8>
 10108e8:	b80f883a 	mov	r7,r23
 10108ec:	01800804 	movi	r6,32
 10108f0:	880b883a 	mov	r5,r17
 10108f4:	9009883a 	mov	r4,r18
 10108f8:	da400615 	stw	r9,24(sp)
 10108fc:	10104a80 	call	10104a8 <print_repeat>
 1010900:	103f361e 	bne	r2,zero,10105dc <___vfprintf_internal_r+0xc8>
 1010904:	da400617 	ldw	r9,24(sp)
 1010908:	85e1883a 	add	r16,r16,r23
 101090c:	483faf26 	beq	r9,zero,10107cc <___vfprintf_internal_r+0x2b8>
 1010910:	00800b44 	movi	r2,45
 1010914:	d88007c5 	stb	r2,31(sp)
 1010918:	88800117 	ldw	r2,4(r17)
 101091c:	01c00044 	movi	r7,1
 1010920:	d98007c4 	addi	r6,sp,31
 1010924:	880b883a 	mov	r5,r17
 1010928:	9009883a 	mov	r4,r18
 101092c:	103ee83a 	callr	r2
 1010930:	103f2a1e 	bne	r2,zero,10105dc <___vfprintf_internal_r+0xc8>
 1010934:	84000044 	addi	r16,r16,1
 1010938:	003fa406 	br	10107cc <___vfprintf_internal_r+0x2b8>
 101093c:	40bfffc3 	ldbu	r2,-1(r8)
 1010940:	01c00044 	movi	r7,1
 1010944:	423fffc4 	addi	r8,r8,-1
 1010948:	d88007c5 	stb	r2,31(sp)
 101094c:	88800117 	ldw	r2,4(r17)
 1010950:	d98007c4 	addi	r6,sp,31
 1010954:	880b883a 	mov	r5,r17
 1010958:	9009883a 	mov	r4,r18
 101095c:	da000315 	stw	r8,12(sp)
 1010960:	103ee83a 	callr	r2
 1010964:	da000317 	ldw	r8,12(sp)
 1010968:	103f9b26 	beq	r2,zero,10107d8 <___vfprintf_internal_r+0x2c4>
 101096c:	003f1b06 	br	10105dc <___vfprintf_internal_r+0xc8>
 1010970:	05000204 	movi	r20,8
 1010974:	b8800104 	addi	r2,r23,4
 1010978:	d8800415 	stw	r2,16(sp)
 101097c:	bdc00017 	ldw	r23,0(r23)
 1010980:	d8000015 	stw	zero,0(sp)
 1010984:	0013883a 	mov	r9,zero
 1010988:	003f6606 	br	1010724 <___vfprintf_internal_r+0x210>
 101098c:	98800090 	cmplti	r2,r19,2
 1010990:	1000091e 	bne	r2,zero,10109b8 <___vfprintf_internal_r+0x4a4>
 1010994:	99ffffc4 	addi	r7,r19,-1
 1010998:	01800804 	movi	r6,32
 101099c:	880b883a 	mov	r5,r17
 10109a0:	9009883a 	mov	r4,r18
 10109a4:	d9c00315 	stw	r7,12(sp)
 10109a8:	10104a80 	call	10104a8 <print_repeat>
 10109ac:	103f0b1e 	bne	r2,zero,10105dc <___vfprintf_internal_r+0xc8>
 10109b0:	d9c00317 	ldw	r7,12(sp)
 10109b4:	81e1883a 	add	r16,r16,r7
 10109b8:	b8800017 	ldw	r2,0(r23)
 10109bc:	b8c00104 	addi	r3,r23,4
 10109c0:	01c00044 	movi	r7,1
 10109c4:	d8800805 	stb	r2,32(sp)
 10109c8:	88800117 	ldw	r2,4(r17)
 10109cc:	d9800804 	addi	r6,sp,32
 10109d0:	880b883a 	mov	r5,r17
 10109d4:	9009883a 	mov	r4,r18
 10109d8:	d8c00315 	stw	r3,12(sp)
 10109dc:	103ee83a 	callr	r2
 10109e0:	103efe1e 	bne	r2,zero,10105dc <___vfprintf_internal_r+0xc8>
 10109e4:	d8c00317 	ldw	r3,12(sp)
 10109e8:	84000044 	addi	r16,r16,1
 10109ec:	182f883a 	mov	r23,r3
 10109f0:	003ee306 	br	1010580 <___vfprintf_internal_r+0x6c>
 10109f4:	00800044 	movi	r2,1
 10109f8:	d8000215 	stw	zero,8(sp)
 10109fc:	002b883a 	mov	r21,zero
 1010a00:	d8000115 	stw	zero,4(sp)
 1010a04:	d8800015 	stw	r2,0(sp)
 1010a08:	05000284 	movi	r20,10
 1010a0c:	05bfffc4 	movi	r22,-1
 1010a10:	04ffffc4 	movi	r19,-1
 1010a14:	003eda06 	br	1010580 <___vfprintf_internal_r+0x6c>
 1010a18:	00800044 	movi	r2,1
 1010a1c:	d8800115 	stw	r2,4(sp)
 1010a20:	003f0a06 	br	101064c <___vfprintf_internal_r+0x138>
 1010a24:	05400044 	movi	r21,1
 1010a28:	008000c4 	movi	r2,3
 1010a2c:	003ed406 	br	1010580 <___vfprintf_internal_r+0x6c>

01010a30 <__vfprintf_internal>:
 1010a30:	00804074 	movhi	r2,257
 1010a34:	300f883a 	mov	r7,r6
 1010a38:	280d883a 	mov	r6,r5
 1010a3c:	200b883a 	mov	r5,r4
 1010a40:	11066117 	ldw	r4,6532(r2)
 1010a44:	10105141 	jmpi	1010514 <___vfprintf_internal_r>

01010a48 <__sfvwrite_small_dev>:
 1010a48:	2880000b 	ldhu	r2,0(r5)
 1010a4c:	1080020c 	andi	r2,r2,8
 1010a50:	10002526 	beq	r2,zero,1010ae8 <__sfvwrite_small_dev+0xa0>
 1010a54:	2880008f 	ldh	r2,2(r5)
 1010a58:	defffb04 	addi	sp,sp,-20
 1010a5c:	dcc00315 	stw	r19,12(sp)
 1010a60:	dc800215 	stw	r18,8(sp)
 1010a64:	dc400115 	stw	r17,4(sp)
 1010a68:	dc000015 	stw	r16,0(sp)
 1010a6c:	dfc00415 	stw	ra,16(sp)
 1010a70:	2027883a 	mov	r19,r4
 1010a74:	2821883a 	mov	r16,r5
 1010a78:	3025883a 	mov	r18,r6
 1010a7c:	3823883a 	mov	r17,r7
 1010a80:	1000100e 	bge	r2,zero,1010ac4 <__sfvwrite_small_dev+0x7c>
 1010a84:	8080000b 	ldhu	r2,0(r16)
 1010a88:	10801014 	ori	r2,r2,64
 1010a8c:	8080000d 	sth	r2,0(r16)
 1010a90:	00bfffc4 	movi	r2,-1
 1010a94:	00000d06 	br	1010acc <__sfvwrite_small_dev+0x84>
 1010a98:	88810050 	cmplti	r2,r17,1025
 1010a9c:	880f883a 	mov	r7,r17
 1010aa0:	1000011e 	bne	r2,zero,1010aa8 <__sfvwrite_small_dev+0x60>
 1010aa4:	01c10004 	movi	r7,1024
 1010aa8:	8140008f 	ldh	r5,2(r16)
 1010aac:	900d883a 	mov	r6,r18
 1010ab0:	9809883a 	mov	r4,r19
 1010ab4:	1010b9c0 	call	1010b9c <_write_r>
 1010ab8:	00bff20e 	bge	zero,r2,1010a84 <__sfvwrite_small_dev+0x3c>
 1010abc:	88a3c83a 	sub	r17,r17,r2
 1010ac0:	90a5883a 	add	r18,r18,r2
 1010ac4:	047ff416 	blt	zero,r17,1010a98 <__sfvwrite_small_dev+0x50>
 1010ac8:	0005883a 	mov	r2,zero
 1010acc:	dfc00417 	ldw	ra,16(sp)
 1010ad0:	dcc00317 	ldw	r19,12(sp)
 1010ad4:	dc800217 	ldw	r18,8(sp)
 1010ad8:	dc400117 	ldw	r17,4(sp)
 1010adc:	dc000017 	ldw	r16,0(sp)
 1010ae0:	dec00504 	addi	sp,sp,20
 1010ae4:	f800283a 	ret
 1010ae8:	00bfffc4 	movi	r2,-1
 1010aec:	f800283a 	ret

01010af0 <putc>:
 1010af0:	defffd04 	addi	sp,sp,-12
 1010af4:	00804074 	movhi	r2,257
 1010af8:	dc000115 	stw	r16,4(sp)
 1010afc:	dfc00215 	stw	ra,8(sp)
 1010b00:	10829204 	addi	r2,r2,2632
 1010b04:	28800115 	stw	r2,4(r5)
 1010b08:	00804074 	movhi	r2,257
 1010b0c:	d90000c5 	stb	r4,3(sp)
 1010b10:	2021883a 	mov	r16,r4
 1010b14:	11066117 	ldw	r4,6532(r2)
 1010b18:	01c00044 	movi	r7,1
 1010b1c:	d98000c4 	addi	r6,sp,3
 1010b20:	1010a480 	call	1010a48 <__sfvwrite_small_dev>
 1010b24:	10bfffd8 	cmpnei	r2,r2,-1
 1010b28:	1000011e 	bne	r2,zero,1010b30 <putc+0x40>
 1010b2c:	043fffc4 	movi	r16,-1
 1010b30:	8005883a 	mov	r2,r16
 1010b34:	dfc00217 	ldw	ra,8(sp)
 1010b38:	dc000117 	ldw	r16,4(sp)
 1010b3c:	dec00304 	addi	sp,sp,12
 1010b40:	f800283a 	ret

01010b44 <_putc_r>:
 1010b44:	defffd04 	addi	sp,sp,-12
 1010b48:	00804074 	movhi	r2,257
 1010b4c:	dc000115 	stw	r16,4(sp)
 1010b50:	dfc00215 	stw	ra,8(sp)
 1010b54:	10829204 	addi	r2,r2,2632
 1010b58:	30800115 	stw	r2,4(r6)
 1010b5c:	00804074 	movhi	r2,257
 1010b60:	11066117 	ldw	r4,6532(r2)
 1010b64:	2821883a 	mov	r16,r5
 1010b68:	01c00044 	movi	r7,1
 1010b6c:	300b883a 	mov	r5,r6
 1010b70:	d98000c4 	addi	r6,sp,3
 1010b74:	dc0000c5 	stb	r16,3(sp)
 1010b78:	1010a480 	call	1010a48 <__sfvwrite_small_dev>
 1010b7c:	10bfffd8 	cmpnei	r2,r2,-1
 1010b80:	1000011e 	bne	r2,zero,1010b88 <_putc_r+0x44>
 1010b84:	043fffc4 	movi	r16,-1
 1010b88:	8005883a 	mov	r2,r16
 1010b8c:	dfc00217 	ldw	ra,8(sp)
 1010b90:	dc000117 	ldw	r16,4(sp)
 1010b94:	dec00304 	addi	sp,sp,12
 1010b98:	f800283a 	ret

01010b9c <_write_r>:
 1010b9c:	defffe04 	addi	sp,sp,-8
 1010ba0:	dc000015 	stw	r16,0(sp)
 1010ba4:	00804074 	movhi	r2,257
 1010ba8:	2021883a 	mov	r16,r4
 1010bac:	2809883a 	mov	r4,r5
 1010bb0:	300b883a 	mov	r5,r6
 1010bb4:	380d883a 	mov	r6,r7
 1010bb8:	dfc00115 	stw	ra,4(sp)
 1010bbc:	1006bd15 	stw	zero,6900(r2)
 1010bc0:	1010f400 	call	1010f40 <write>
 1010bc4:	10ffffd8 	cmpnei	r3,r2,-1
 1010bc8:	1800041e 	bne	r3,zero,1010bdc <_write_r+0x40>
 1010bcc:	00c04074 	movhi	r3,257
 1010bd0:	18c6bd17 	ldw	r3,6900(r3)
 1010bd4:	18000126 	beq	r3,zero,1010bdc <_write_r+0x40>
 1010bd8:	80c00015 	stw	r3,0(r16)
 1010bdc:	dfc00117 	ldw	ra,4(sp)
 1010be0:	dc000017 	ldw	r16,0(sp)
 1010be4:	dec00204 	addi	sp,sp,8
 1010be8:	f800283a 	ret

01010bec <__divsi3>:
 1010bec:	20001a16 	blt	r4,zero,1010c58 <__divsi3+0x6c>
 1010bf0:	000f883a 	mov	r7,zero
 1010bf4:	2800020e 	bge	r5,zero,1010c00 <__divsi3+0x14>
 1010bf8:	014bc83a 	sub	r5,zero,r5
 1010bfc:	39c0005c 	xori	r7,r7,1
 1010c00:	200d883a 	mov	r6,r4
 1010c04:	00c00044 	movi	r3,1
 1010c08:	2900092e 	bgeu	r5,r4,1010c30 <__divsi3+0x44>
 1010c0c:	00800804 	movi	r2,32
 1010c10:	00c00044 	movi	r3,1
 1010c14:	00000106 	br	1010c1c <__divsi3+0x30>
 1010c18:	10001226 	beq	r2,zero,1010c64 <__divsi3+0x78>
 1010c1c:	294b883a 	add	r5,r5,r5
 1010c20:	10bfffc4 	addi	r2,r2,-1
 1010c24:	18c7883a 	add	r3,r3,r3
 1010c28:	293ffb36 	bltu	r5,r4,1010c18 <__divsi3+0x2c>
 1010c2c:	18000d26 	beq	r3,zero,1010c64 <__divsi3+0x78>
 1010c30:	0005883a 	mov	r2,zero
 1010c34:	31400236 	bltu	r6,r5,1010c40 <__divsi3+0x54>
 1010c38:	314dc83a 	sub	r6,r6,r5
 1010c3c:	10c4b03a 	or	r2,r2,r3
 1010c40:	1806d07a 	srli	r3,r3,1
 1010c44:	280ad07a 	srli	r5,r5,1
 1010c48:	183ffa1e 	bne	r3,zero,1010c34 <__divsi3+0x48>
 1010c4c:	38000126 	beq	r7,zero,1010c54 <__divsi3+0x68>
 1010c50:	0085c83a 	sub	r2,zero,r2
 1010c54:	f800283a 	ret
 1010c58:	0109c83a 	sub	r4,zero,r4
 1010c5c:	01c00044 	movi	r7,1
 1010c60:	003fe406 	br	1010bf4 <__divsi3+0x8>
 1010c64:	0005883a 	mov	r2,zero
 1010c68:	003ff806 	br	1010c4c <__divsi3+0x60>

01010c6c <__modsi3>:
 1010c6c:	20001716 	blt	r4,zero,1010ccc <__modsi3+0x60>
 1010c70:	000f883a 	mov	r7,zero
 1010c74:	2005883a 	mov	r2,r4
 1010c78:	2800010e 	bge	r5,zero,1010c80 <__modsi3+0x14>
 1010c7c:	014bc83a 	sub	r5,zero,r5
 1010c80:	00c00044 	movi	r3,1
 1010c84:	2900092e 	bgeu	r5,r4,1010cac <__modsi3+0x40>
 1010c88:	01800804 	movi	r6,32
 1010c8c:	00c00044 	movi	r3,1
 1010c90:	00000106 	br	1010c98 <__modsi3+0x2c>
 1010c94:	30001026 	beq	r6,zero,1010cd8 <__modsi3+0x6c>
 1010c98:	294b883a 	add	r5,r5,r5
 1010c9c:	31bfffc4 	addi	r6,r6,-1
 1010ca0:	18c7883a 	add	r3,r3,r3
 1010ca4:	293ffb36 	bltu	r5,r4,1010c94 <__modsi3+0x28>
 1010ca8:	18000b26 	beq	r3,zero,1010cd8 <__modsi3+0x6c>
 1010cac:	1806d07a 	srli	r3,r3,1
 1010cb0:	11400136 	bltu	r2,r5,1010cb8 <__modsi3+0x4c>
 1010cb4:	1145c83a 	sub	r2,r2,r5
 1010cb8:	280ad07a 	srli	r5,r5,1
 1010cbc:	183ffb1e 	bne	r3,zero,1010cac <__modsi3+0x40>
 1010cc0:	38000126 	beq	r7,zero,1010cc8 <__modsi3+0x5c>
 1010cc4:	0085c83a 	sub	r2,zero,r2
 1010cc8:	f800283a 	ret
 1010ccc:	0109c83a 	sub	r4,zero,r4
 1010cd0:	01c00044 	movi	r7,1
 1010cd4:	003fe706 	br	1010c74 <__modsi3+0x8>
 1010cd8:	2005883a 	mov	r2,r4
 1010cdc:	003ff806 	br	1010cc0 <__modsi3+0x54>

01010ce0 <__udivsi3>:
 1010ce0:	200d883a 	mov	r6,r4
 1010ce4:	2900152e 	bgeu	r5,r4,1010d3c <__udivsi3+0x5c>
 1010ce8:	28001416 	blt	r5,zero,1010d3c <__udivsi3+0x5c>
 1010cec:	00800804 	movi	r2,32
 1010cf0:	00c00044 	movi	r3,1
 1010cf4:	00000206 	br	1010d00 <__udivsi3+0x20>
 1010cf8:	10000e26 	beq	r2,zero,1010d34 <__udivsi3+0x54>
 1010cfc:	28000416 	blt	r5,zero,1010d10 <__udivsi3+0x30>
 1010d00:	294b883a 	add	r5,r5,r5
 1010d04:	10bfffc4 	addi	r2,r2,-1
 1010d08:	18c7883a 	add	r3,r3,r3
 1010d0c:	293ffa36 	bltu	r5,r4,1010cf8 <__udivsi3+0x18>
 1010d10:	18000826 	beq	r3,zero,1010d34 <__udivsi3+0x54>
 1010d14:	0005883a 	mov	r2,zero
 1010d18:	31400236 	bltu	r6,r5,1010d24 <__udivsi3+0x44>
 1010d1c:	314dc83a 	sub	r6,r6,r5
 1010d20:	10c4b03a 	or	r2,r2,r3
 1010d24:	1806d07a 	srli	r3,r3,1
 1010d28:	280ad07a 	srli	r5,r5,1
 1010d2c:	183ffa1e 	bne	r3,zero,1010d18 <__udivsi3+0x38>
 1010d30:	f800283a 	ret
 1010d34:	0005883a 	mov	r2,zero
 1010d38:	f800283a 	ret
 1010d3c:	00c00044 	movi	r3,1
 1010d40:	003ff406 	br	1010d14 <__udivsi3+0x34>

01010d44 <__umodsi3>:
 1010d44:	2005883a 	mov	r2,r4
 1010d48:	2900132e 	bgeu	r5,r4,1010d98 <__umodsi3+0x54>
 1010d4c:	28001216 	blt	r5,zero,1010d98 <__umodsi3+0x54>
 1010d50:	01800804 	movi	r6,32
 1010d54:	00c00044 	movi	r3,1
 1010d58:	00000206 	br	1010d64 <__umodsi3+0x20>
 1010d5c:	30000c26 	beq	r6,zero,1010d90 <__umodsi3+0x4c>
 1010d60:	28000416 	blt	r5,zero,1010d74 <__umodsi3+0x30>
 1010d64:	294b883a 	add	r5,r5,r5
 1010d68:	31bfffc4 	addi	r6,r6,-1
 1010d6c:	18c7883a 	add	r3,r3,r3
 1010d70:	293ffa36 	bltu	r5,r4,1010d5c <__umodsi3+0x18>
 1010d74:	18000626 	beq	r3,zero,1010d90 <__umodsi3+0x4c>
 1010d78:	1806d07a 	srli	r3,r3,1
 1010d7c:	11400136 	bltu	r2,r5,1010d84 <__umodsi3+0x40>
 1010d80:	1145c83a 	sub	r2,r2,r5
 1010d84:	280ad07a 	srli	r5,r5,1
 1010d88:	183ffb1e 	bne	r3,zero,1010d78 <__umodsi3+0x34>
 1010d8c:	f800283a 	ret
 1010d90:	2005883a 	mov	r2,r4
 1010d94:	f800283a 	ret
 1010d98:	00c00044 	movi	r3,1
 1010d9c:	003ff606 	br	1010d78 <__umodsi3+0x34>

01010da0 <__mulsi3>:
 1010da0:	0005883a 	mov	r2,zero
 1010da4:	20000726 	beq	r4,zero,1010dc4 <__mulsi3+0x24>
 1010da8:	20c0004c 	andi	r3,r4,1
 1010dac:	2008d07a 	srli	r4,r4,1
 1010db0:	18000126 	beq	r3,zero,1010db8 <__mulsi3+0x18>
 1010db4:	1145883a 	add	r2,r2,r5
 1010db8:	294b883a 	add	r5,r5,r5
 1010dbc:	203ffa1e 	bne	r4,zero,1010da8 <__mulsi3+0x8>
 1010dc0:	f800283a 	ret
 1010dc4:	f800283a 	ret

01010dc8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 1010dc8:	defffe04 	addi	sp,sp,-8
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 1010dcc:	008666b4 	movhi	r2,6554
{
 1010dd0:	dc000015 	stw	r16,0(sp)
 1010dd4:	dfc00115 	stw	ra,4(sp)
  if (big_loops)
 1010dd8:	10a66604 	addi	r2,r2,-26216
{
 1010ddc:	2021883a 	mov	r16,r4
  if (big_loops)
 1010de0:	1100182e 	bgeu	r2,r4,1010e44 <alt_busy_sleep+0x7c>
  big_loops = us / (INT_MAX/
 1010de4:	014666b4 	movhi	r5,6554
 1010de8:	29666644 	addi	r5,r5,-26215
 1010dec:	1010ce00 	call	1010ce0 <__udivsi3>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 1010df0:	00e00034 	movhi	r3,32768
  big_loops = us / (INT_MAX/
 1010df4:	1009883a 	mov	r4,r2
      __asm__ volatile (
 1010df8:	18ffffc4 	addi	r3,r3,-1
    for(i=0;i<big_loops;i++)
 1010dfc:	0005883a 	mov	r2,zero
      __asm__ volatile (
 1010e00:	18ffffc4 	addi	r3,r3,-1
 1010e04:	183ffe1e 	bne	r3,zero,1010e00 <alt_busy_sleep+0x38>
    for(i=0;i<big_loops;i++)
 1010e08:	10800044 	addi	r2,r2,1
 1010e0c:	113ffc16 	blt	r2,r4,1010e00 <alt_busy_sleep+0x38>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 1010e10:	017999b4 	movhi	r5,58982
 1010e14:	295999c4 	addi	r5,r5,26215
 1010e18:	1010da00 	call	1010da0 <__mulsi3>
 1010e1c:	1405883a 	add	r2,r2,r16
 1010e20:	100690ba 	slli	r3,r2,2
 1010e24:	1885883a 	add	r2,r3,r2
    __asm__ volatile (
 1010e28:	10bfffc4 	addi	r2,r2,-1
 1010e2c:	103ffe1e 	bne	r2,zero,1010e28 <alt_busy_sleep+0x60>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 1010e30:	0005883a 	mov	r2,zero
 1010e34:	dfc00117 	ldw	ra,4(sp)
 1010e38:	dc000017 	ldw	r16,0(sp)
 1010e3c:	dec00204 	addi	sp,sp,8
 1010e40:	f800283a 	ret
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 1010e44:	200490ba 	slli	r2,r4,2
 1010e48:	1105883a 	add	r2,r2,r4
    __asm__ volatile (
 1010e4c:	10bfffc4 	addi	r2,r2,-1
 1010e50:	00bffe16 	blt	zero,r2,1010e4c <alt_busy_sleep+0x84>
 1010e54:	003ff606 	br	1010e30 <alt_busy_sleep+0x68>

01010e58 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1010e58:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 1010e5c:	01004074 	movhi	r4,257
 1010e60:	01404074 	movhi	r5,257
 1010e64:	dfc00015 	stw	ra,0(sp)
 1010e68:	21061304 	addi	r4,r4,6220
 1010e6c:	29466704 	addi	r5,r5,6556
 1010e70:	21400426 	beq	r4,r5,1010e84 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
 1010e74:	01804074 	movhi	r6,257
 1010e78:	31866704 	addi	r6,r6,6556
 1010e7c:	310dc83a 	sub	r6,r6,r4
 1010e80:	10116ec0 	call	10116ec <memcpy>
  if (to != from)
 1010e84:	01004074 	movhi	r4,257
 1010e88:	01404074 	movhi	r5,257
 1010e8c:	21000804 	addi	r4,r4,32
 1010e90:	29400804 	addi	r5,r5,32
 1010e94:	21400426 	beq	r4,r5,1010ea8 <alt_load+0x50>
      *to++ = *from++;
 1010e98:	01804074 	movhi	r6,257
 1010e9c:	31800804 	addi	r6,r6,32
 1010ea0:	310dc83a 	sub	r6,r6,r4
 1010ea4:	10116ec0 	call	10116ec <memcpy>
  if (to != from)
 1010ea8:	01004074 	movhi	r4,257
 1010eac:	01404074 	movhi	r5,257
 1010eb0:	2105c504 	addi	r4,r4,5908
 1010eb4:	2945c504 	addi	r5,r5,5908
 1010eb8:	21400426 	beq	r4,r5,1010ecc <alt_load+0x74>
      *to++ = *from++;
 1010ebc:	01804074 	movhi	r6,257
 1010ec0:	31861304 	addi	r6,r6,6220
 1010ec4:	310dc83a 	sub	r6,r6,r4
 1010ec8:	10116ec0 	call	10116ec <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1010ecc:	10115740 	call	1011574 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 1010ed0:	dfc00017 	ldw	ra,0(sp)
 1010ed4:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
 1010ed8:	10116401 	jmpi	1011640 <alt_icache_flush_all>

01010edc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1010edc:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1010ee0:	0009883a 	mov	r4,zero
{
 1010ee4:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
 1010ee8:	1010f9c0 	call	1010f9c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1010eec:	1010fbc0 	call	1010fbc <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 1010ef0:	d1a05f17 	ldw	r6,-32388(gp)
 1010ef4:	d1606017 	ldw	r5,-32384(gp)
 1010ef8:	d1206117 	ldw	r4,-32380(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 1010efc:	dfc00017 	ldw	ra,0(sp)
 1010f00:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
 1010f04:	101005c1 	jmpi	101005c <main>

01010f08 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 1010f08:	defffe04 	addi	sp,sp,-8
 1010f0c:	dc000015 	stw	r16,0(sp)
 1010f10:	dfc00115 	stw	ra,4(sp)
 1010f14:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 1010f18:	101048c0 	call	101048c <strlen>
 1010f1c:	01004074 	movhi	r4,257
 1010f20:	000f883a 	mov	r7,zero
 1010f24:	100d883a 	mov	r6,r2
 1010f28:	800b883a 	mov	r5,r16
 1010f2c:	21066304 	addi	r4,r4,6540
#else
    return fputs(str, stdout);
#endif
#endif
}
 1010f30:	dfc00117 	ldw	ra,4(sp)
 1010f34:	dc000017 	ldw	r16,0(sp)
 1010f38:	dec00204 	addi	sp,sp,8
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 1010f3c:	1010fc81 	jmpi	1010fc8 <altera_avalon_jtag_uart_write>

01010f40 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
 1010f40:	213fffc4 	addi	r4,r4,-1
 1010f44:	210000a8 	cmpgeui	r4,r4,2
 1010f48:	2000041e 	bne	r4,zero,1010f5c <write+0x1c>
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
 1010f4c:	01004074 	movhi	r4,257
 1010f50:	000f883a 	mov	r7,zero
 1010f54:	21066304 	addi	r4,r4,6540
 1010f58:	1010fc81 	jmpi	1010fc8 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 1010f5c:	d0a00517 	ldw	r2,-32748(gp)
 1010f60:	10000926 	beq	r2,zero,1010f88 <write+0x48>
{
 1010f64:	deffff04 	addi	sp,sp,-4
 1010f68:	dfc00015 	stw	ra,0(sp)
 1010f6c:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 1010f70:	00c01444 	movi	r3,81
 1010f74:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 1010f78:	00bfffc4 	movi	r2,-1
 1010f7c:	dfc00017 	ldw	ra,0(sp)
 1010f80:	dec00104 	addi	sp,sp,4
 1010f84:	f800283a 	ret
 1010f88:	d0a05e04 	addi	r2,gp,-32392
        ALT_ERRNO = EBADFD;
 1010f8c:	00c01444 	movi	r3,81
 1010f90:	10c00015 	stw	r3,0(r2)
}
 1010f94:	00bfffc4 	movi	r2,-1
 1010f98:	f800283a 	ret

01010f9c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1010f9c:	deffff04 	addi	sp,sp,-4
 1010fa0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS, NIOS);
 1010fa4:	10116440 	call	1011644 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1010fa8:	00800044 	movi	r2,1
 1010fac:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1010fb0:	dfc00017 	ldw	ra,0(sp)
 1010fb4:	dec00104 	addi	sp,sp,4
 1010fb8:	f800283a 	ret

01010fbc <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( DEBUG, DEBUG);
    ALTERA_EPCQ_CONTROLLER2_INIT ( EPCQ, EPCQ);
 1010fbc:	01004074 	movhi	r4,257
 1010fc0:	21062804 	addi	r4,r4,6304
 1010fc4:	10113e81 	jmpi	10113e8 <altera_epcq_controller2_init>

01010fc8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 1010fc8:	20c00017 	ldw	r3,0(r4)
{
 1010fcc:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
 1010fd0:	2989883a 	add	r4,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 1010fd4:	01bfffd4 	movui	r6,65535
  while (ptr < end)
 1010fd8:	29000136 	bltu	r5,r4,1010fe0 <altera_avalon_jtag_uart_write+0x18>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
 1010fdc:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 1010fe0:	19c00137 	ldwio	r7,4(r3)
 1010fe4:	31fffc2e 	bgeu	r6,r7,1010fd8 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 1010fe8:	29c00007 	ldb	r7,0(r5)
 1010fec:	29400044 	addi	r5,r5,1
 1010ff0:	19c00035 	stwio	r7,0(r3)
 1010ff4:	003ff806 	br	1010fd8 <altera_avalon_jtag_uart_write+0x10>

01010ff8 <alt_epcq_controller2_lock>:
    alt_epcq_controller2_dev* epcq_flash_info = NULL;
    alt_u32 result = 0;
    alt_32 status = 0;

    /* return -EINVAL if flash_info is NULL */
    if(NULL == flash_info || 0 > sectors_to_lock)
 1010ff8:	20001426 	beq	r4,zero,101104c <alt_epcq_controller2_lock+0x54>
    }
    
    epcq_flash_info = (alt_epcq_controller2_dev*)flash_info;

    /* sector value should occupy bits 17:8 */
    mem_op_value = sectors_to_lock << 8;
 1010ffc:	280a923a 	slli	r5,r5,8

    /* sector protect commands 0b11 occupies lower 2 bits */
    mem_op_value |= ALTERA_EPCQ_CONTROLLER2_MEM_OP_SECTOR_PROTECT_CMD;

    /* write sector protect command to EPCQ_MEM_OP register to protect sectors */
    IOWR_ALTERA_EPCQ_CONTROLLER2_MEM_OP(epcq_flash_info->csr_base, mem_op_value);
 1011000:	20803017 	ldw	r2,192(r4)
{
 1011004:	defffe04 	addi	sp,sp,-8
 1011008:	dc000015 	stw	r16,0(sp)
 101100c:	dfc00115 	stw	ra,4(sp)
 1011010:	2021883a 	mov	r16,r4
    mem_op_value |= ALTERA_EPCQ_CONTROLLER2_MEM_OP_SECTOR_PROTECT_CMD;
 1011014:	294000d4 	ori	r5,r5,3
    IOWR_ALTERA_EPCQ_CONTROLLER2_MEM_OP(epcq_flash_info->csr_base, mem_op_value);
 1011018:	11400335 	stwio	r5,12(r2)
    {
        return -EINVAL;
    }

    /* while Write in Progress bit is set, we wait */
    while((IORD_ALTERA_EPCQ_CONTROLLER2_STATUS(epcq_flash_info->csr_base) &
 101101c:	80c03017 	ldw	r3,192(r16)
 1011020:	18800037 	ldwio	r2,0(r3)
 1011024:	1080004c 	andi	r2,r2,1
            ALTERA_EPCQ_CONTROLLER2_STATUS_WIP_MASK) ==
 1011028:	1000051e 	bne	r2,zero,1011040 <alt_epcq_controller2_lock+0x48>
    status = IORD_ALTERA_EPCQ_CONTROLLER2_STATUS(epcq_flash_info->csr_base);
 101102c:	18c00037 	ldwio	r3,0(r3)
}
 1011030:	dfc00117 	ldw	ra,4(sp)
 1011034:	dc000017 	ldw	r16,0(sp)
 1011038:	dec00204 	addi	sp,sp,8
 101103c:	f800283a 	ret
            ALTERA_EPCQ_CONTROLLER2_STATUS_WIP_BUSY)
    {
        alt_busy_sleep(1); /* delay 1us */
 1011040:	01000044 	movi	r4,1
 1011044:	1010dc80 	call	1010dc8 <alt_busy_sleep>
        if(timeout <= counter )
        {
            return -ETIME;
        }
        
        counter++;
 1011048:	003ff406 	br	101101c <alt_epcq_controller2_lock+0x24>
        return -EINVAL;
 101104c:	00bffa84 	movi	r2,-22
}
 1011050:	f800283a 	ret

01011054 <alt_epcq_controller2_get_info>:
    if(NULL == fd || NULL == info || NULL == number_of_regions)
 1011054:	20000926 	beq	r4,zero,101107c <alt_epcq_controller2_get_info+0x28>
 1011058:	28000826 	beq	r5,zero,101107c <alt_epcq_controller2_get_info+0x28>
 101105c:	30000726 	beq	r6,zero,101107c <alt_epcq_controller2_get_info+0x28>
    *number_of_regions = flash->number_of_regions;
 1011060:	20800c17 	ldw	r2,48(r4)
 1011064:	30800015 	stw	r2,0(r6)
    if (!flash->number_of_regions)
 1011068:	10000626 	beq	r2,zero,1011084 <alt_epcq_controller2_get_info+0x30>
      *info = &flash->region_info[0];
 101106c:	21000d04 	addi	r4,r4,52
 1011070:	29000015 	stw	r4,0(r5)
    return 0;
 1011074:	0005883a 	mov	r2,zero
 1011078:	f800283a 	ret
        return -EINVAL;
 101107c:	00bffa84 	movi	r2,-22
 1011080:	f800283a 	ret
      return -EIO;
 1011084:	00bffec4 	movi	r2,-5
}
 1011088:	f800283a 	ret

0101108c <alt_epcq_controller2_erase_block>:
{
 101108c:	defffe04 	addi	sp,sp,-8
 1011090:	dc000015 	stw	r16,0(sp)
 1011094:	dfc00115 	stw	ra,4(sp)
 1011098:	2021883a 	mov	r16,r4
    if(NULL == flash_info)
 101109c:	20001e26 	beq	r4,zero,1011118 <alt_epcq_controller2_erase_block+0x8c>
 10110a0:	2809883a 	mov	r4,r5
    if((block_offset < 0) 
 10110a4:	28001c16 	blt	r5,zero,1011118 <alt_epcq_controller2_erase_block+0x8c>
        || (block_offset >= epcq_flash_info->size_in_bytes)
 10110a8:	80803117 	ldw	r2,196(r16)
 10110ac:	28801a2e 	bgeu	r5,r2,1011118 <alt_epcq_controller2_erase_block+0x8c>
        || (block_offset & (epcq_flash_info->sector_size - 1)) != 0)
 10110b0:	81403417 	ldw	r5,208(r16)
 10110b4:	28bfffc4 	addi	r2,r5,-1
 10110b8:	1104703a 	and	r2,r2,r4
 10110bc:	1000161e 	bne	r2,zero,1011118 <alt_epcq_controller2_erase_block+0x8c>
    sector_number = (block_offset/(epcq_flash_info->sector_size));
 10110c0:	1010ce00 	call	1010ce0 <__udivsi3>
    mem_op_value = (sector_number << 8) & ALTERA_EPCQ_CONTROLLER2_MEM_OP_SECTOR_VALUE_MASK;
 10110c4:	1004923a 	slli	r2,r2,8
 10110c8:	00c04034 	movhi	r3,256
 10110cc:	18ffc004 	addi	r3,r3,-256
 10110d0:	10c4703a 	and	r2,r2,r3
    IOWR_ALTERA_EPCQ_CONTROLLER2_MEM_OP(epcq_flash_info->csr_base, mem_op_value);
 10110d4:	80c03017 	ldw	r3,192(r16)
    mem_op_value |= ALTERA_EPCQ_CONTROLLER2_MEM_OP_WRITE_ENABLE_CMD;
 10110d8:	11000114 	ori	r4,r2,4
    IOWR_ALTERA_EPCQ_CONTROLLER2_MEM_OP(epcq_flash_info->csr_base, mem_op_value);
 10110dc:	19000335 	stwio	r4,12(r3)
    IOWR_ALTERA_EPCQ_CONTROLLER2_MEM_OP(epcq_flash_info->csr_base, mem_op_value);
 10110e0:	80c03017 	ldw	r3,192(r16)
    mem_op_value |= ALTERA_EPCQ_CONTROLLER2_MEM_OP_SECTOR_ERASE_CMD;
 10110e4:	10800094 	ori	r2,r2,2
    IOWR_ALTERA_EPCQ_CONTROLLER2_MEM_OP(epcq_flash_info->csr_base, mem_op_value);
 10110e8:	18800335 	stwio	r2,12(r3)
    if((IORD_ALTERA_EPCQ_CONTROLLER2_ISR(epcq_flash_info->csr_base) &
 10110ec:	80c03017 	ldw	r3,192(r16)
 10110f0:	18800437 	ldwio	r2,16(r3)
 10110f4:	1080004c 	andi	r2,r2,1
 10110f8:	10000326 	beq	r2,zero,1011108 <alt_epcq_controller2_erase_block+0x7c>
        IOWR_ALTERA_EPCQ_CONTROLLER2_ISR(epcq_flash_info->csr_base,
 10110fc:	00800044 	movi	r2,1
 1011100:	18800435 	stwio	r2,16(r3)
        return -EIO; /* erase failed, sector might be protected */
 1011104:	00bffec4 	movi	r2,-5
}
 1011108:	dfc00117 	ldw	ra,4(sp)
 101110c:	dc000017 	ldw	r16,0(sp)
 1011110:	dec00204 	addi	sp,sp,8
 1011114:	f800283a 	ret
        return -EINVAL;
 1011118:	00bffa84 	movi	r2,-22
 101111c:	003ffa06 	br	1011108 <alt_epcq_controller2_erase_block+0x7c>

01011120 <alt_epcq_controller2_write_block>:
{
 1011120:	defff604 	addi	sp,sp,-40
 1011124:	dc400215 	stw	r17,8(sp)
 1011128:	dfc00915 	stw	ra,36(sp)
 101112c:	ddc00815 	stw	r23,32(sp)
 1011130:	dd800715 	stw	r22,28(sp)
 1011134:	dd400615 	stw	r21,24(sp)
 1011138:	dd000515 	stw	r20,20(sp)
 101113c:	dcc00415 	stw	r19,16(sp)
 1011140:	dc800315 	stw	r18,12(sp)
 1011144:	dc000115 	stw	r16,4(sp)
        || data_offset < 0
 1011148:	3144b03a 	or	r2,r6,r5
    alt_u32 remaining_length = length; /** length left to write */
 101114c:	dc400a17 	ldw	r17,40(sp)
        || data_offset < 0
 1011150:	10004416 	blt	r2,zero,1011264 <alt_epcq_controller2_write_block+0x144>
 1011154:	2027883a 	mov	r19,r4
        || NULL == flash_info
 1011158:	20004226 	beq	r4,zero,1011264 <alt_epcq_controller2_write_block+0x144>
 101115c:	382b883a 	mov	r21,r7
        || NULL == data
 1011160:	38004026 	beq	r7,zero,1011264 <alt_epcq_controller2_write_block+0x144>
        || data_offset >= epcq_flash_info->size_in_bytes
 1011164:	20803117 	ldw	r2,196(r4)
 1011168:	3021883a 	mov	r16,r6
 101116c:	30803d2e 	bgeu	r6,r2,1011264 <alt_epcq_controller2_write_block+0x144>
        || block_offset >= epcq_flash_info->size_in_bytes
 1011170:	28803c2e 	bgeu	r5,r2,1011264 <alt_epcq_controller2_write_block+0x144>
        || length > (epcq_flash_info->sector_size - (data_offset - block_offset))
 1011174:	24803417 	ldw	r18,208(r4)
 1011178:	3145c83a 	sub	r2,r6,r5
 101117c:	9085c83a 	sub	r2,r18,r2
 1011180:	14403836 	bltu	r2,r17,1011264 <alt_epcq_controller2_write_block+0x144>
        || length < 0
 1011184:	88003716 	blt	r17,zero,1011264 <alt_epcq_controller2_write_block+0x144>
        || (block_offset & (epcq_flash_info->sector_size - 1)) != 0) 
 1011188:	94bfffc4 	addi	r18,r18,-1
 101118c:	9164703a 	and	r18,r18,r5
 1011190:	9000341e 	bne	r18,zero,1011264 <alt_epcq_controller2_write_block+0x144>
        alt_u32 word_to_write = 0xFFFFFFFF; /** initialize word to write to blank word */
 1011194:	05bfffc4 	movi	r22,-1
            if(bytes_to_copy > remaining_length)
 1011198:	05c00104 	movi	r23,4
    while (remaining_length > 0)
 101119c:	8800021e 	bne	r17,zero,10111a8 <alt_epcq_controller2_write_block+0x88>
    return 0;
 10111a0:	0005883a 	mov	r2,zero
 10111a4:	00001d06 	br	101121c <alt_epcq_controller2_write_block+0xfc>
        alt_u32 word_to_write = 0xFFFFFFFF; /** initialize word to write to blank word */
 10111a8:	dd800015 	stw	r22,0(sp)
        if (0 != (write_offset & (sizeof(alt_u32) - 1)))
 10111ac:	810000cc 	andi	r4,r16,3
 10111b0:	20002526 	beq	r4,zero,1011248 <alt_epcq_controller2_write_block+0x128>
            bytes_to_copy -= padding;
 10111b4:	b929c83a 	sub	r20,r23,r4
 10111b8:	8d00012e 	bgeu	r17,r20,10111c0 <alt_epcq_controller2_write_block+0xa0>
 10111bc:	8829883a 	mov	r20,r17
            write_offset = write_offset - padding;
 10111c0:	8121c83a 	sub	r16,r16,r4
        memcpy((((void*)&word_to_write)) + padding, ((void*)data) + buffer_offset, bytes_to_copy);
 10111c4:	ac8b883a 	add	r5,r21,r18
 10111c8:	a00d883a 	mov	r6,r20
 10111cc:	d909883a 	add	r4,sp,r4
 10111d0:	10116ec0 	call	10116ec <memcpy>
        IOWR_32DIRECT(epcq_flash_info->data_base, write_offset, word_to_write);
 10111d4:	98802e17 	ldw	r2,184(r19)
 10111d8:	d8c00017 	ldw	r3,0(sp)
        buffer_offset += bytes_to_copy;
 10111dc:	9525883a 	add	r18,r18,r20
        remaining_length -= bytes_to_copy;
 10111e0:	8d23c83a 	sub	r17,r17,r20
        IOWR_32DIRECT(epcq_flash_info->data_base, write_offset, word_to_write);
 10111e4:	8085883a 	add	r2,r16,r2
 10111e8:	10c00035 	stwio	r3,0(r2)
        if (IORD_32DIRECT(epcq_flash_info->data_base, write_offset) != word_to_write)
 10111ec:	98802e17 	ldw	r2,184(r19)
 10111f0:	8085883a 	add	r2,r16,r2
 10111f4:	11000037 	ldwio	r4,0(r2)
 10111f8:	19000126 	beq	r3,r4,1011200 <alt_epcq_controller2_write_block+0xe0>
            IOWR_32DIRECT(epcq_flash_info->data_base, write_offset, word_to_write);
 10111fc:	10c00035 	stwio	r3,0(r2)
        if((IORD_ALTERA_EPCQ_CONTROLLER2_ISR(epcq_flash_info->csr_base) &
 1011200:	98c03017 	ldw	r3,192(r19)
 1011204:	18800437 	ldwio	r2,16(r3)
 1011208:	1080008c 	andi	r2,r2,2
 101120c:	10001326 	beq	r2,zero,101125c <alt_epcq_controller2_write_block+0x13c>
            IOWR_ALTERA_EPCQ_CONTROLLER2_ISR(epcq_flash_info->csr_base,
 1011210:	00800084 	movi	r2,2
 1011214:	18800435 	stwio	r2,16(r3)
                return -EINVAL;
 1011218:	00bffec4 	movi	r2,-5
}
 101121c:	dfc00917 	ldw	ra,36(sp)
 1011220:	ddc00817 	ldw	r23,32(sp)
 1011224:	dd800717 	ldw	r22,28(sp)
 1011228:	dd400617 	ldw	r21,24(sp)
 101122c:	dd000517 	ldw	r20,20(sp)
 1011230:	dcc00417 	ldw	r19,16(sp)
 1011234:	dc800317 	ldw	r18,12(sp)
 1011238:	dc400217 	ldw	r17,8(sp)
 101123c:	dc000117 	ldw	r16,4(sp)
 1011240:	dec00a04 	addi	sp,sp,40
 1011244:	f800283a 	ret
            if(bytes_to_copy > remaining_length)
 1011248:	88800170 	cmpltui	r2,r17,5
 101124c:	8829883a 	mov	r20,r17
 1011250:	103fdc1e 	bne	r2,zero,10111c4 <alt_epcq_controller2_write_block+0xa4>
 1011254:	05000104 	movi	r20,4
 1011258:	003fda06 	br	10111c4 <alt_epcq_controller2_write_block+0xa4>
        write_offset = write_offset + sizeof(alt_u32);
 101125c:	84000104 	addi	r16,r16,4
 1011260:	003fce06 	br	101119c <alt_epcq_controller2_write_block+0x7c>
        return -EINVAL;
 1011264:	00bffa84 	movi	r2,-22
 1011268:	003fec06 	br	101121c <alt_epcq_controller2_write_block+0xfc>

0101126c <alt_epcq_controller2_write>:
    if(NULL == flash_info || NULL == src_addr)
 101126c:	20003b26 	beq	r4,zero,101135c <alt_epcq_controller2_write+0xf0>
{
 1011270:	defff504 	addi	sp,sp,-44
 1011274:	dd000515 	stw	r20,20(sp)
 1011278:	dfc00a15 	stw	ra,40(sp)
 101127c:	df000915 	stw	fp,36(sp)
 1011280:	ddc00815 	stw	r23,32(sp)
 1011284:	dd800715 	stw	r22,28(sp)
 1011288:	dd400615 	stw	r21,24(sp)
 101128c:	dcc00415 	stw	r19,16(sp)
 1011290:	dc800315 	stw	r18,12(sp)
 1011294:	dc400215 	stw	r17,8(sp)
 1011298:	dc000115 	stw	r16,4(sp)
 101129c:	3029883a 	mov	r20,r6
    if(NULL == flash_info || NULL == src_addr)
 10112a0:	30003026 	beq	r6,zero,1011364 <alt_epcq_controller2_write+0xf8>
  start_address = epcq_flash_info->data_base + offset; /** first address of read or write */
 10112a4:	20802e17 	ldw	r2,184(r4)
 10112a8:	2021883a 	mov	r16,r4
          start_address >= epcq_flash_info->data_end ||
 10112ac:	80c02f17 	ldw	r3,188(r16)
  start_address = epcq_flash_info->data_base + offset; /** first address of read or write */
 10112b0:	2885883a 	add	r2,r5,r2
 10112b4:	2823883a 	mov	r17,r5
 10112b8:	3825883a 	mov	r18,r7
  end_address = start_address + length; /** last address of read or write (not inclusive) */
 10112bc:	3889883a 	add	r4,r7,r2
  if(
 10112c0:	10c0282e 	bgeu	r2,r3,1011364 <alt_epcq_controller2_write+0xf8>
          offset < 0 ||
 10112c4:	19002736 	bltu	r3,r4,1011364 <alt_epcq_controller2_write+0xf8>
    for(i = offset/epcq_flash_info->sector_size ; i < epcq_flash_info->number_of_sectors; i++)
 10112c8:	81403417 	ldw	r5,208(r16)
 10112cc:	8809883a 	mov	r4,r17
    alt_u32 buffer_offset = 0; /** offset into source buffer to get write data */
 10112d0:	002f883a 	mov	r23,zero
    for(i = offset/epcq_flash_info->sector_size ; i < epcq_flash_info->number_of_sectors; i++)
 10112d4:	1010ce00 	call	1010ce0 <__udivsi3>
 10112d8:	102d883a 	mov	r22,r2
 10112dc:	80803317 	ldw	r2,204(r16)
 10112e0:	b0800236 	bltu	r22,r2,10112ec <alt_epcq_controller2_write+0x80>
    return ret_code;
 10112e4:	0005883a 	mov	r2,zero
 10112e8:	00001f06 	br	1011368 <alt_epcq_controller2_write+0xfc>
        if(0 >= remaining_length)
 10112ec:	903ffd26 	beq	r18,zero,10112e4 <alt_epcq_controller2_write+0x78>
        block_offset = write_offset & ~(epcq_flash_info->sector_size - 1);
 10112f0:	85403417 	ldw	r21,208(r16)
 10112f4:	056bc83a 	sub	r21,zero,r21
 10112f8:	ac6a703a 	and	r21,r21,r17
        if(block_offset != write_offset)
 10112fc:	8d401526 	beq	r17,r21,1011354 <alt_epcq_controller2_write+0xe8>
            offset_within_current_sector = write_offset - block_offset;
 1011300:	8d79c83a 	sub	fp,r17,r21
        ret_code = alt_epcq_controller2_erase_block(flash_info, block_offset);
 1011304:	a80b883a 	mov	r5,r21
 1011308:	8009883a 	mov	r4,r16
 101130c:	101108c0 	call	101108c <alt_epcq_controller2_erase_block>
        if(0 != ret_code)
 1011310:	1000151e 	bne	r2,zero,1011368 <alt_epcq_controller2_write+0xfc>
        length_to_write = MIN(epcq_flash_info->sector_size - offset_within_current_sector, 
 1011314:	84c03417 	ldw	r19,208(r16)
 1011318:	9f27c83a 	sub	r19,r19,fp
 101131c:	94c0012e 	bgeu	r18,r19,1011324 <alt_epcq_controller2_write+0xb8>
 1011320:	9027883a 	mov	r19,r18
        ret_code = alt_epcq_controller2_write_block(flash_info, block_offset, write_offset,
 1011324:	dcc00015 	stw	r19,0(sp)
 1011328:	a5cf883a 	add	r7,r20,r23
 101132c:	880d883a 	mov	r6,r17
 1011330:	a80b883a 	mov	r5,r21
 1011334:	8009883a 	mov	r4,r16
 1011338:	10111200 	call	1011120 <alt_epcq_controller2_write_block>
        if(0 != ret_code)
 101133c:	10000a1e 	bne	r2,zero,1011368 <alt_epcq_controller2_write+0xfc>
        remaining_length -= length_to_write;
 1011340:	94e5c83a 	sub	r18,r18,r19
        buffer_offset += length_to_write;
 1011344:	bcef883a 	add	r23,r23,r19
        write_offset += length_to_write; 
 1011348:	8ce3883a 	add	r17,r17,r19
    for(i = offset/epcq_flash_info->sector_size ; i < epcq_flash_info->number_of_sectors; i++)
 101134c:	b5800044 	addi	r22,r22,1
 1011350:	003fe206 	br	10112dc <alt_epcq_controller2_write+0x70>
        alt_u32 offset_within_current_sector = 0; /** offset into current sector to write */
 1011354:	0039883a 	mov	fp,zero
 1011358:	003fea06 	br	1011304 <alt_epcq_controller2_write+0x98>
        return -EINVAL;
 101135c:	00bffa84 	movi	r2,-22
}
 1011360:	f800283a 	ret
        return -EINVAL;
 1011364:	00bffa84 	movi	r2,-22
}
 1011368:	dfc00a17 	ldw	ra,40(sp)
 101136c:	df000917 	ldw	fp,36(sp)
 1011370:	ddc00817 	ldw	r23,32(sp)
 1011374:	dd800717 	ldw	r22,28(sp)
 1011378:	dd400617 	ldw	r21,24(sp)
 101137c:	dd000517 	ldw	r20,20(sp)
 1011380:	dcc00417 	ldw	r19,16(sp)
 1011384:	dc800317 	ldw	r18,12(sp)
 1011388:	dc400217 	ldw	r17,8(sp)
 101138c:	dc000117 	ldw	r16,4(sp)
 1011390:	dec00b04 	addi	sp,sp,44
 1011394:	f800283a 	ret

01011398 <alt_epcq_controller2_read>:
{
 1011398:	2005883a 	mov	r2,r4
    if(NULL == flash_info || NULL == dest_addr)
 101139c:	20001026 	beq	r4,zero,10113e0 <alt_epcq_controller2_read+0x48>
 10113a0:	3009883a 	mov	r4,r6
 10113a4:	30000e26 	beq	r6,zero,10113e0 <alt_epcq_controller2_read+0x48>
  start_address = epcq_flash_info->data_base + offset; /** first address of read or write */
 10113a8:	10c02e17 	ldw	r3,184(r2)
          start_address >= epcq_flash_info->data_end ||
 10113ac:	10802f17 	ldw	r2,188(r2)
 10113b0:	380d883a 	mov	r6,r7
  start_address = epcq_flash_info->data_base + offset; /** first address of read or write */
 10113b4:	28cb883a 	add	r5,r5,r3
  end_address = start_address + length; /** last address of read or write (not inclusive) */
 10113b8:	3947883a 	add	r3,r7,r5
  if(
 10113bc:	2880082e 	bgeu	r5,r2,10113e0 <alt_epcq_controller2_read+0x48>
          offset < 0 ||
 10113c0:	10c00736 	bltu	r2,r3,10113e0 <alt_epcq_controller2_read+0x48>
{
 10113c4:	deffff04 	addi	sp,sp,-4
 10113c8:	dfc00015 	stw	ra,0(sp)
        memcpy(dest_addr, (alt_u8*)epcq_flash_info->data_base + offset, length);
 10113cc:	10116ec0 	call	10116ec <memcpy>
  return 0;
 10113d0:	0005883a 	mov	r2,zero
}
 10113d4:	dfc00017 	ldw	ra,0(sp)
 10113d8:	dec00104 	addi	sp,sp,4
 10113dc:	f800283a 	ret
        return -EINVAL;
 10113e0:	00bffa84 	movi	r2,-22
}
 10113e4:	f800283a 	ret

010113e8 <altera_epcq_controller2_init>:
    if(NULL == flash)
 10113e8:	20006026 	beq	r4,zero,101156c <altera_epcq_controller2_init+0x184>
    if(NULL == (void *)flash->csr_base)
 10113ec:	20803017 	ldw	r2,192(r4)
{
 10113f0:	defffb04 	addi	sp,sp,-20
 10113f4:	dc000015 	stw	r16,0(sp)
 10113f8:	dfc00415 	stw	ra,16(sp)
 10113fc:	dcc00315 	stw	r19,12(sp)
 1011400:	dc800215 	stw	r18,8(sp)
 1011404:	dc400115 	stw	r17,4(sp)
 1011408:	2021883a 	mov	r16,r4
    if(NULL == (void *)flash->csr_base)
 101140c:	10002426 	beq	r2,zero,10114a0 <altera_epcq_controller2_init+0xb8>
    if(0 == flash->is_epcs)
 1011410:	20c03217 	ldw	r3,200(r4)
 1011414:	1800361e 	bne	r3,zero,10114f0 <altera_epcq_controller2_init+0x108>
        silicon_id = IORD_ALTERA_EPCQ_CONTROLLER2_RDID(flash->csr_base);
 1011418:	10800237 	ldwio	r2,8(r2)
        switch(silicon_id)
 101141c:	10803fcc 	andi	r2,r2,255
 1011420:	10bffac4 	addi	r2,r2,-21
 1011424:	10c00368 	cmpgeui	r3,r2,13
 1011428:	18001d1e 	bne	r3,zero,10114a0 <altera_epcq_controller2_init+0xb8>
 101142c:	100490ba 	slli	r2,r2,2
 1011430:	00c04074 	movhi	r3,257
 1011434:	10c7883a 	add	r3,r2,r3
 1011438:	18851017 	ldw	r2,5184(r3)
 101143c:	1000683a 	jmp	r2
 1011440:	01011474 	movhi	r4,1105
 1011444:	01011528 	cmpgeui	r4,zero,1108
 1011448:	010114c0 	call	10114c <__alt_mem_EPCQ_avl_mem+0x10114c>
 101144c:	0101151c 	xori	r4,zero,1108
 1011450:	010114cc 	andi	r4,zero,1107
 1011454:	010114a0 	cmpeqi	r4,zero,1106
 1011458:	010114a0 	cmpeqi	r4,zero,1106
 101145c:	010114a0 	cmpeqi	r4,zero,1106
 1011460:	010114a0 	cmpeqi	r4,zero,1106
 1011464:	010114a0 	cmpeqi	r4,zero,1106
 1011468:	010114a0 	cmpeqi	r4,zero,1106
 101146c:	010114d8 	cmpnei	r4,zero,1107
 1011470:	010114e4 	muli	r4,zero,1107
                number_of_sectors = 32;
 1011474:	04400804 	movi	r17,32
        silicon_id &= ALTERA_EPCQ_CONTROLLER2_RDID_MASK;
 1011478:	04800544 	movi	r18,21
    size_in_bytes = number_of_sectors * flash->sector_size;
 101147c:	84c03417 	ldw	r19,208(r16)
 1011480:	880b883a 	mov	r5,r17
 1011484:	9809883a 	mov	r4,r19
 1011488:	1010da00 	call	1010da0 <__mulsi3>
    if(    size_in_bytes != flash->size_in_bytes ||
 101148c:	80c03117 	ldw	r3,196(r16)
 1011490:	1880021e 	bne	r3,r2,101149c <altera_epcq_controller2_init+0xb4>
 1011494:	80803317 	ldw	r2,204(r16)
 1011498:	14402826 	beq	r2,r17,101153c <altera_epcq_controller2_init+0x154>
        flash->dev.number_of_regions = 0;
 101149c:	80000c15 	stw	zero,48(r16)
        return -ENODEV;
 10114a0:	00bffb44 	movi	r2,-19
}
 10114a4:	dfc00417 	ldw	ra,16(sp)
 10114a8:	dcc00317 	ldw	r19,12(sp)
 10114ac:	dc800217 	ldw	r18,8(sp)
 10114b0:	dc400117 	ldw	r17,4(sp)
 10114b4:	dc000017 	ldw	r16,0(sp)
 10114b8:	dec00504 	addi	sp,sp,20
 10114bc:	f800283a 	ret
                number_of_sectors = 128;
 10114c0:	04402004 	movi	r17,128
        silicon_id &= ALTERA_EPCQ_CONTROLLER2_RDID_MASK;
 10114c4:	048005c4 	movi	r18,23
                break;
 10114c8:	003fec06 	br	101147c <altera_epcq_controller2_init+0x94>
                number_of_sectors = 512;
 10114cc:	04408004 	movi	r17,512
        silicon_id &= ALTERA_EPCQ_CONTROLLER2_RDID_MASK;
 10114d0:	04800644 	movi	r18,25
                break;
 10114d4:	003fe906 	br	101147c <altera_epcq_controller2_init+0x94>
                number_of_sectors = 1024;
 10114d8:	04410004 	movi	r17,1024
        silicon_id &= ALTERA_EPCQ_CONTROLLER2_RDID_MASK;
 10114dc:	04800804 	movi	r18,32
                break;
 10114e0:	003fe606 	br	101147c <altera_epcq_controller2_init+0x94>
                number_of_sectors = 2048;
 10114e4:	04420004 	movi	r17,2048
        silicon_id &= ALTERA_EPCQ_CONTROLLER2_RDID_MASK;
 10114e8:	04800844 	movi	r18,33
                break;
 10114ec:	003fe306 	br	101147c <altera_epcq_controller2_init+0x94>
        silicon_id = IORD_ALTERA_EPCQ_CONTROLLER2_SID(flash->csr_base);
 10114f0:	10800137 	ldwio	r2,4(r2)
        silicon_id &= ALTERA_EPCQ_CONTROLLER2_SID_MASK;
 10114f4:	10803fcc 	andi	r2,r2,255
        switch(silicon_id)
 10114f8:	10c005a0 	cmpeqi	r3,r2,22
 10114fc:	18000d1e 	bne	r3,zero,1011534 <altera_epcq_controller2_init+0x14c>
 1011500:	10c00620 	cmpeqi	r3,r2,24
 1011504:	1800051e 	bne	r3,zero,101151c <altera_epcq_controller2_init+0x134>
 1011508:	10800520 	cmpeqi	r2,r2,20
 101150c:	103fe426 	beq	r2,zero,10114a0 <altera_epcq_controller2_init+0xb8>
                number_of_sectors = 32;
 1011510:	04400804 	movi	r17,32
        silicon_id &= ALTERA_EPCQ_CONTROLLER2_SID_MASK;
 1011514:	04800504 	movi	r18,20
 1011518:	003fd806 	br	101147c <altera_epcq_controller2_init+0x94>
                number_of_sectors = 256;
 101151c:	04404004 	movi	r17,256
        silicon_id &= ALTERA_EPCQ_CONTROLLER2_SID_MASK;
 1011520:	04800604 	movi	r18,24
 1011524:	003fd506 	br	101147c <altera_epcq_controller2_init+0x94>
        switch(silicon_id)
 1011528:	04401004 	movi	r17,64
        switch(silicon_id)
 101152c:	04800584 	movi	r18,22
 1011530:	003fd206 	br	101147c <altera_epcq_controller2_init+0x94>
 1011534:	04402004 	movi	r17,128
 1011538:	003ffc06 	br	101152c <altera_epcq_controller2_init+0x144>
        flash->dev.number_of_regions = 1;
 101153c:	00800044 	movi	r2,1
        flash->silicon_id = silicon_id;
 1011540:	84803615 	stw	r18,216(r16)
        flash->dev.number_of_regions = 1;
 1011544:	80800c15 	stw	r2,48(r16)
        flash->dev.region_info[0].offset = 0;
 1011548:	80000d15 	stw	zero,52(r16)
        flash->dev.region_info[0].region_size = size_in_bytes;
 101154c:	80c00e15 	stw	r3,56(r16)
        flash->dev.region_info[0].number_of_blocks = number_of_sectors;
 1011550:	84400f15 	stw	r17,60(r16)
        flash->dev.region_info[0].block_size = flash->sector_size;
 1011554:	84c01015 	stw	r19,64(r16)

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 1011558:	d1600604 	addi	r5,gp,-32744
 101155c:	8009883a 	mov	r4,r16
 1011560:	10115780 	call	1011578 <alt_dev_llist_insert>
    return 0;
 1011564:	0005883a 	mov	r2,zero
 1011568:	003fce06 	br	10114a4 <altera_epcq_controller2_init+0xbc>
        return -EINVAL;
 101156c:	00bffa84 	movi	r2,-22
}
 1011570:	f800283a 	ret

01011574 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1011574:	f800283a 	ret

01011578 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1011578:	20000226 	beq	r4,zero,1011584 <alt_dev_llist_insert+0xc>
 101157c:	20800217 	ldw	r2,8(r4)
 1011580:	10000b1e 	bne	r2,zero,10115b0 <alt_dev_llist_insert+0x38>
 1011584:	d0a00517 	ldw	r2,-32748(gp)
 1011588:	10001026 	beq	r2,zero,10115cc <alt_dev_llist_insert+0x54>
{
 101158c:	deffff04 	addi	sp,sp,-4
 1011590:	dfc00015 	stw	ra,0(sp)
 1011594:	103ee83a 	callr	r2
  {
    ALT_ERRNO = EINVAL;
 1011598:	00c00584 	movi	r3,22
 101159c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 10115a0:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 10115a4:	dfc00017 	ldw	ra,0(sp)
 10115a8:	dec00104 	addi	sp,sp,4
 10115ac:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
 10115b0:	28800017 	ldw	r2,0(r5)
  entry->previous = list;
 10115b4:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
 10115b8:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
 10115bc:	11000115 	stw	r4,4(r2)
  list->next           = entry;
 10115c0:	29000015 	stw	r4,0(r5)
  return 0;  
 10115c4:	0005883a 	mov	r2,zero
 10115c8:	f800283a 	ret
 10115cc:	d0a05e04 	addi	r2,gp,-32392
    ALT_ERRNO = EINVAL;
 10115d0:	00c00584 	movi	r3,22
 10115d4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 10115d8:	00bffa84 	movi	r2,-22
}
 10115dc:	f800283a 	ret

010115e0 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 10115e0:	defffe04 	addi	sp,sp,-8
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 10115e4:	d1600604 	addi	r5,gp,-32744
{
 10115e8:	dc000015 	stw	r16,0(sp)
 10115ec:	dfc00115 	stw	ra,4(sp)
 10115f0:	2021883a 	mov	r16,r4
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 10115f4:	101164c0 	call	101164c <alt_find_dev>

  if ((dev) && dev->open)
 10115f8:	10000826 	beq	r2,zero,101161c <alt_flash_open_dev+0x3c>
 10115fc:	10c00317 	ldw	r3,12(r2)
 1011600:	18000626 	beq	r3,zero,101161c <alt_flash_open_dev+0x3c>
  {
    return dev->open(dev, name);
 1011604:	800b883a 	mov	r5,r16
 1011608:	1009883a 	mov	r4,r2
  }

  return dev;
}
 101160c:	dfc00117 	ldw	ra,4(sp)
 1011610:	dc000017 	ldw	r16,0(sp)
 1011614:	dec00204 	addi	sp,sp,8
    return dev->open(dev, name);
 1011618:	1800683a 	jmp	r3
}
 101161c:	dfc00117 	ldw	ra,4(sp)
 1011620:	dc000017 	ldw	r16,0(sp)
 1011624:	dec00204 	addi	sp,sp,8
 1011628:	f800283a 	ret

0101162c <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
  if (fd && fd->close)
 101162c:	20000326 	beq	r4,zero,101163c <alt_flash_close_dev+0x10>
 1011630:	20800417 	ldw	r2,16(r4)
 1011634:	10000126 	beq	r2,zero,101163c <alt_flash_close_dev+0x10>
  {
    fd->close(fd);
 1011638:	1000683a 	jmp	r2
  }
  return;
}
 101163c:	f800283a 	ret

01011640 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 1011640:	f800283a 	ret

01011644 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 1011644:	000170fa 	wrctl	ienable,zero
}
 1011648:	f800283a 	ret

0101164c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 101164c:	defffb04 	addi	sp,sp,-20
 1011650:	dcc00315 	stw	r19,12(sp)
 1011654:	dc800215 	stw	r18,8(sp)
 1011658:	dc400115 	stw	r17,4(sp)
 101165c:	dc000015 	stw	r16,0(sp)
 1011660:	dfc00415 	stw	ra,16(sp)
  alt_dev* next = (alt_dev*) llist->next;
 1011664:	2c000017 	ldw	r16,0(r5)
{
 1011668:	2027883a 	mov	r19,r4
 101166c:	2823883a 	mov	r17,r5
  alt_32 len;

  len  = strlen(name) + 1;
 1011670:	101048c0 	call	101048c <strlen>
 1011674:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1011678:	8440091e 	bne	r16,r17,10116a0 <alt_find_dev+0x54>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 101167c:	0021883a 	mov	r16,zero
}
 1011680:	8005883a 	mov	r2,r16
 1011684:	dfc00417 	ldw	ra,16(sp)
 1011688:	dcc00317 	ldw	r19,12(sp)
 101168c:	dc800217 	ldw	r18,8(sp)
 1011690:	dc400117 	ldw	r17,4(sp)
 1011694:	dc000017 	ldw	r16,0(sp)
 1011698:	dec00504 	addi	sp,sp,20
 101169c:	f800283a 	ret
    if (!memcmp (next->name, name, len))
 10116a0:	81000217 	ldw	r4,8(r16)
 10116a4:	900d883a 	mov	r6,r18
 10116a8:	980b883a 	mov	r5,r19
 10116ac:	10116bc0 	call	10116bc <memcmp>
 10116b0:	103ff326 	beq	r2,zero,1011680 <alt_find_dev+0x34>
    next = (alt_dev*) next->llist.next;
 10116b4:	84000017 	ldw	r16,0(r16)
 10116b8:	003fef06 	br	1011678 <alt_find_dev+0x2c>

010116bc <memcmp>:
 10116bc:	0007883a 	mov	r3,zero
 10116c0:	30c0021e 	bne	r6,r3,10116cc <memcmp+0x10>
 10116c4:	0005883a 	mov	r2,zero
 10116c8:	f800283a 	ret
 10116cc:	20c5883a 	add	r2,r4,r3
 10116d0:	18c00044 	addi	r3,r3,1
 10116d4:	28cf883a 	add	r7,r5,r3
 10116d8:	10800003 	ldbu	r2,0(r2)
 10116dc:	39ffffc3 	ldbu	r7,-1(r7)
 10116e0:	11fff726 	beq	r2,r7,10116c0 <memcmp+0x4>
 10116e4:	11c5c83a 	sub	r2,r2,r7
 10116e8:	f800283a 	ret

010116ec <memcpy>:
 10116ec:	2005883a 	mov	r2,r4
 10116f0:	0007883a 	mov	r3,zero
 10116f4:	30c0011e 	bne	r6,r3,10116fc <memcpy+0x10>
 10116f8:	f800283a 	ret
 10116fc:	28cf883a 	add	r7,r5,r3
 1011700:	39c00003 	ldbu	r7,0(r7)
 1011704:	10c9883a 	add	r4,r2,r3
 1011708:	18c00044 	addi	r3,r3,1
 101170c:	21c00005 	stb	r7,0(r4)
 1011710:	003ff806 	br	10116f4 <memcpy+0x8>
