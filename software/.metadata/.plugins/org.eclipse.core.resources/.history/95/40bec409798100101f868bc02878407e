
#include "sys/alt_stdio.h"
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "stdint.h"
#include "sys/alt_sys_init.h"
#include "sys/alt_flash.h"
#include "peripheral/peripheral_linker.h"

int main()
{ 
  alt_putstr("------- Welcome to EPCQ Read/ Write Programme! -------\n");
  alt_putstr("Please refer to the memory range for your EPCQ Device\n");

  /* Flash Erase-Write Operation Located Outside Event Loop to Prevent Excessive Flash Usage which leads to Premature Degradation */
  // Function protoype for read flash - int alt_epcq_controller2_read(alt_flash_dev *flash_info, int offset, void *dest_addr, int length);
  // Flash Handler here is "epcq_dev_ptr -> refer to alt_sys_init.c (user defined data)

  if(alt_epcq_controller2_read(&epcq_dev_ptr->dev, mem_read_offset, subsector_buffer, length) == 0) {
	  printf("Read successful!\n");
	  print_read_epcq_mem(subsector_buffer, mem_read_offset, length);
  } else {
	  printf("Read failed!\n");
  }

  if(erase_epcq_sector(0x000000) == 0) {
	  printf("Erase successful!\n");
  } else {
	  printf("Erase failed!\n");
  }

  if(alt_epcq_controller2_read(&epcq_dev_ptr->dev, mem_read_offset, subsector_buffer, length) == 0) {
	  printf("Read successful!\n");
	  print_read_epcq_mem(subsector_buffer, mem_read_offset, length);
  } else {
	  printf("Read failed!\n");
  }

  /* Event loop never exits. */
  while (1){
	  // do nothing
  }

  return 0;
}

// Sanity Check: LED is Blinking
/*
 *  uint8_t on_off = 1;
	IOWR(LED_BASE, 0, on_off);
	on_off = ~on_off;
	alt_busy_sleep(1000000);
*/

/* A Very Simple and Crude Method to Write Information into EPCQ Memory */
// At the offset from Base Address, Write the Value into Flash, provided the location has not been written before
/*
	IOWR_8DIRECT(EPCQ_AVL_MEM_BASE, 0x000000 + 0, 0x64); // d
	IOWR_8DIRECT(EPCQ_AVL_MEM_BASE, 0x000000 + 1, 0x65); // e
	IOWR_8DIRECT(EPCQ_AVL_MEM_BASE, 0x000000 + 2, 0x6E); // n
	IOWR_8DIRECT(EPCQ_AVL_MEM_BASE, 0x000000 + 3, 0x6E); // n
	IOWR_8DIRECT(EPCQ_AVL_MEM_BASE, 0x000000 + 4, 0x69); // i
	IOWR_8DIRECT(EPCQ_AVL_MEM_BASE, 0x000000 + 5, 0x73); // s
*/

/*
 *
	  printf("-------------------start of sector 0-------------------------------");
	  for (int i = 0; i < 0x0010000; i++) {
		uint8_t data = IORD_8DIRECT(EPCQ_AVL_MEM_BASE, 0x000000 + i);
		printf("%02X ", data);
		//IOWR_8DIRECT(EPCQ_AVL_MEM_BASE, 0x000000 + i, data+1);
		if ((i+1)%16==0) printf("\n");
	  printf("---------------------end of sector 0-------------------------------");
	}


 *
 *
 *
 * */
